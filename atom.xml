<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ShiXiang&#39;s Notes</title>
  
  <subtitle>Quick notes</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-06-21T08:17:34.845Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Shi Xiang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>typescript-泛型</title>
    <link href="http://yoursite.com/2019/06/20/typescript-learning4/"/>
    <id>http://yoursite.com/2019/06/20/typescript-learning4/</id>
    <published>2019-06-20T15:18:18.000Z</published>
    <updated>2019-06-21T08:17:34.845Z</updated>
    
    <content type="html"><![CDATA[<h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><h2 id="泛型的使用"><a href="#泛型的使用" class="headerlink" title="泛型的使用"></a>泛型的使用</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">returnIt</span>&lt;<span class="title">T</span>&gt;(<span class="params">sth: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sth;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s = returnIt&lt;<span class="built_in">string</span>&gt;(<span class="string">'hi'</span>);</span><br><span class="line"><span class="keyword">let</span> s2 = returnIt&lt;<span class="built_in">number</span>&gt;(<span class="string">'hello'</span>) <span class="comment">// 报错了</span></span><br></pre></td></tr></table></figure><p><strong>泛型</strong>就是用一个东西表示广泛的类型，由如上述代码，在函数变量名<code>returnIt</code>后面加<code>&lt;T&gt;</code>，然后函数参数指定<code>T</code>类型，函数返回也是<code>T</code>类型，<strong>并且这个<code>T</code>可以写任意字母</strong>。<code>returnIt&lt;number&gt;(&#39;hello&#39;)</code>会报错，因为<code>&#39;hello&#39;</code>是<code>string</code>类型，但是函数调用时说明了接受<code>number</code>类型参数。</p><a id="more"></a><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">returnIt</span>&lt;<span class="title">T</span>&gt;(<span class="params">sth: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sth;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">interface</span> Human &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s = returnIt&lt;Human&gt;(&#123;name: <span class="string">'jack'</span>, age: <span class="number">18</span>&#125;)</span><br><span class="line"><span class="keyword">let</span> s1 = returnIt(&#123;name: <span class="string">'jack'</span>, age: <span class="number">18</span>&#125;)</span><br><span class="line"><span class="keyword">let</span> s2 = returnIt&lt;Human&gt;(&#123;name: <span class="string">'jack'</span>&#125;)  <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><p>泛型和接口一起使用，由如上述代码，<code>s</code> <code>s1</code>都可以，<code>s2</code>会报错，因为传入函数的参数不符合接口的定义。</p><h2 id="使用泛型变量"><a href="#使用泛型变量" class="headerlink" title="使用泛型变量"></a>使用泛型变量</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">returnArray</span>&lt;<span class="title">T</span>&gt;(<span class="params">array: T[]</span>): <span class="title">T</span>[] </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s = returnArray([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);</span><br><span class="line"><span class="keyword">let</span> s1 = returnArray(<span class="string">'hi'</span>); <span class="comment">// 报错，因为'hi'不是一个数组</span></span><br></pre></td></tr></table></figure><p>使用泛型类型，可以说明函数参数是一个广泛类型的数组（不关心这个数组内部是什么类型）。</p><h2 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> GenericNumber&lt;T&gt; &#123;</span><br><span class="line">    zeroValue: T;</span><br><span class="line">    add: <span class="function">(<span class="params">x: T, y: T</span>) =&gt;</span> T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myGenericNumber = <span class="keyword">new</span> GenericNumber&lt;<span class="built_in">number</span>&gt;();</span><br><span class="line">myGenericNumber.zeroValue = <span class="number">0</span>;</span><br><span class="line">myGenericNumber.add = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123; <span class="keyword">return</span> x + y; &#125;;</span><br></pre></td></tr></table></figure><p>这个是官方文档的一个例子，当<code>myGenericNumber</code>实例化时，<code>myGenericNumber</code>内就有一个<code>number</code>类型的<code>zeroValue</code>属性，还有一个<code>add</code>方法，这个方法接收两个都是<code>number</code>类型的参数，返回值也是<code>number</code>类型。</p><h2 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">returnIt</span>&lt;<span class="title">T</span>&gt;(<span class="params">sth: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(sth.length);  <span class="comment">// 报错，sth没有length属性</span></span><br><span class="line">    <span class="keyword">return</span> sth;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> s = returnIt&lt;<span class="built_in">string</span>&gt;(<span class="string">'hi'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="keyword">interface</span> hasLength &#123;</span><br><span class="line">    length: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">returnIt</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">hasLength</span>&gt;(<span class="params">sth: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(sth.length);</span><br><span class="line">    <span class="keyword">return</span> sth;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s = returnIt&lt;<span class="built_in">string</span>&gt;(<span class="string">'hi'</span>);</span><br></pre></td></tr></table></figure><p>上述代码第一种情况下，泛型T并没有<code>length</code>属性，所以当访问<code>length</code>属性时，自然会报错，这就是对泛型的约束。第二种情况下，定义了一个具有<code>length</code>属性的接口，并且泛型T继承与接口<code>hasLength</code>，这样就不会报错了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;泛型&quot;&gt;&lt;a href=&quot;#泛型&quot; class=&quot;headerlink&quot; title=&quot;泛型&quot;&gt;&lt;/a&gt;泛型&lt;/h1&gt;&lt;h2 id=&quot;泛型的使用&quot;&gt;&lt;a href=&quot;#泛型的使用&quot; class=&quot;headerlink&quot; title=&quot;泛型的使用&quot;&gt;&lt;/a&gt;泛型的使用&lt;/h2&gt;&lt;figure class=&quot;highlight ts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;returnIt&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;T&lt;/span&gt;&amp;gt;(&lt;span class=&quot;params&quot;&gt;sth: T&lt;/span&gt;): &lt;span class=&quot;title&quot;&gt;T&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; sth;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; s = returnIt&amp;lt;&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;&amp;gt;(&lt;span class=&quot;string&quot;&gt;&#39;hi&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; s2 = returnIt&amp;lt;&lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;&amp;gt;(&lt;span class=&quot;string&quot;&gt;&#39;hello&#39;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 报错了&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;泛型&lt;/strong&gt;就是用一个东西表示广泛的类型，由如上述代码，在函数变量名&lt;code&gt;returnIt&lt;/code&gt;后面加&lt;code&gt;&amp;lt;T&amp;gt;&lt;/code&gt;，然后函数参数指定&lt;code&gt;T&lt;/code&gt;类型，函数返回也是&lt;code&gt;T&lt;/code&gt;类型，&lt;strong&gt;并且这个&lt;code&gt;T&lt;/code&gt;可以写任意字母&lt;/strong&gt;。&lt;code&gt;returnIt&amp;lt;number&amp;gt;(&amp;#39;hello&amp;#39;)&lt;/code&gt;会报错，因为&lt;code&gt;&amp;#39;hello&amp;#39;&lt;/code&gt;是&lt;code&gt;string&lt;/code&gt;类型，但是函数调用时说明了接受&lt;code&gt;number&lt;/code&gt;类型参数。&lt;/p&gt;
    
    </summary>
    
      <category term="TypeScript学习" scheme="http://yoursite.com/categories/TypeScript%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="TypeScript" scheme="http://yoursite.com/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript-函数</title>
    <link href="http://yoursite.com/2019/06/20/typescript-learning3/"/>
    <id>http://yoursite.com/2019/06/20/typescript-learning3/</id>
    <published>2019-06-20T09:14:01.000Z</published>
    <updated>2019-06-22T08:43:48.750Z</updated>
    
    <content type="html"><![CDATA[<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>函数其实也是对象，只是是一个特殊的对象，是<strong>可以被调用（call）的对象</strong>。</p><h2 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ley add2 = <span class="function"><span class="keyword">function</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>给每个参数添加类型之后再为函数本身添加返回值的类型，ts可以根据返回语句自动推断出返回值类型，如果实际返回值不是规定的类型就会报错。</p><a id="more"></a><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> add2: <span class="function">(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span> = <span class="function"><span class="keyword">function</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码是表示<strong>完整函数类型</strong>，其实有两部分，等于号前面和后面两部分；等于号前面部分，意思就是给<code>add2</code>函数定义了一个函数类型，是一个接收两个<code>number</code>类型的参数并且返回值是<code>number</code>类型的函数类型；等于号后面就是一个匿名函数，这个函数也是符合前面定义的函数类型的函数。上述代码中，<code>let add2: (x: number, y: number) =&gt; number</code>其实是这样的：<code>let add2: ((x: number, y: number) =&gt; number)</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> add2: <span class="function">(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span> = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>): </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果在赋值语句的一边指定了类型，但是另一边没有类型的话，ta编译器会自动识别出类型。</p><h2 id="可选参数和默认参数"><a href="#可选参数和默认参数" class="headerlink" title="可选参数和默认参数"></a>可选参数和默认参数</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildName</span>(<span class="params">firstName: <span class="built_in">string</span>, lastName?: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (lastName) &#123;</span><br><span class="line">        <span class="keyword">return</span> firstName + <span class="string">" "</span> + lastName;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> firstName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> res1 = buildName(<span class="string">'Bob'</span>);</span><br><span class="line"><span class="keyword">let</span> res2 = buildName(<span class="string">'Bob'</span>, <span class="string">'Adams'</span>);</span><br></pre></td></tr></table></figure><p>对于可选参数，可以在参数后面加一个问号，如上述代码<code>lastName?: string</code>。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildName</span>(<span class="params">firstName: <span class="built_in">string</span>, lastName='Smith'</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> firstName + <span class="string">" "</span> + lastName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> res1 = buildName(<span class="string">'Bob'</span>);  <span class="comment">// Bob Smith</span></span><br><span class="line"><span class="keyword">let</span> res2 = buildName(<span class="string">'Bob'</span>, <span class="string">'Adams'</span>);  <span class="comment">// Bob Adams</span></span><br><span class="line"><span class="keyword">let</span> res3 = buildName(<span class="string">'Bob'</span>, <span class="literal">undefined</span>)  <span class="comment">// Bob Smith</span></span><br></pre></td></tr></table></figure><p>在ts里，可以为参数提供一个默认值（当用户没有传值或者传了undefined）。</p><h2 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildName</span>(<span class="params">firstName: <span class="built_in">string</span>, ...restOfName: <span class="built_in">string</span>[]</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> firstName + <span class="string">' '</span> + restOfName.jion(<span class="string">' '</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fullName = buildName(<span class="string">"Joseph"</span>, <span class="string">"Samuel"</span>, <span class="string">"Lucas"</span>, <span class="string">"MacKinzie"</span>);</span><br></pre></td></tr></table></figure><p>剩余参数会被当做个数不限的可选参数，可以一个都没有，同样也可以有任意个；在参数前加<code>...</code>，表示一个数组，冒号后面可以定义是个<code>string</code>类型数组还是<code>number</code>类型数组或其他类型数组；在函数体内可以使用这个数组。</p><h2 id="this和箭头函数"><a href="#this和箭头函数" class="headerlink" title="this和箭头函数"></a>this和箭头函数</h2><p>this的值在函数被调用的时候才确定，也就是说，<strong>this值其实是这个函数的参数，只有调用这个函数时才知道this的值是什么</strong>；在TS里，this本质还是和JS里的this一样，不过在TS里，可以事先给this指定类型，或指定必须符合哪个接口或是哪个类：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Human &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"><span class="keyword">this</span>: Human</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn.call(&#123;name: <span class="string">'jack'</span>, age: <span class="number">18</span>&#125;);  <span class="comment">// pass</span></span><br><span class="line">fn();  <span class="comment">// error</span></span><br></pre></td></tr></table></figure><h2 id="函数的重载"><a href="#函数的重载" class="headerlink" title="函数的重载"></a>函数的重载</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">n1: <span class="built_in">number</span>, n2: <span class="built_in">number</span></span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">n1: <span class="built_in">string</span>, n2: <span class="built_in">string</span></span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">n1, n2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n1 + n2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>, <span class="number">2</span>);  <span class="comment">// pass  =&gt; 3</span></span><br><span class="line">add(<span class="string">'a'</span>, <span class="string">'b'</span>)  <span class="comment">// pass  =&gt; 'ab'</span></span><br><span class="line">add(<span class="number">1</span>, <span class="string">'2'</span>)  <span class="comment">// error 两个参数不符合同时是string类型或者number类型</span></span><br></pre></td></tr></table></figure><p>上述代码中，第一行和第二行表示对函数参数类型的定义，可以同时是<code>number``，或者同时是</code>string`，第三行开始的函数就是表示函数功能的具体实现。</p><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><h4 id="类型推断"><a href="#类型推断" class="headerlink" title="类型推断"></a>类型推断</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">n1: <span class="built_in">string</span>, n2: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n1 + n2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s = add(<span class="string">'a'</span> + <span class="string">'b'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(s.split(<span class="string">''</span>));  <span class="comment">// pass</span></span><br></pre></td></tr></table></figure><p>add函数在声明时并不需要声明返回值时什么类型，因为TS自己会推断函数的返回值是什么类型，所以当<code>s.split(&#39;&#39;)</code>时不会报错。</p><h4 id="类型兼容"><a href="#类型兼容" class="headerlink" title="类型兼容"></a>类型兼容</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Human &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> human1: Human = &#123;name: <span class="string">'jack'</span>, age: <span class="number">18</span>, gender: <span class="string">'male'</span>&#125;; <span class="comment">//报错，因为对象不符合接口Human的定义，多了gender属性</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x = &#123;name: <span class="string">'jack'</span>, age: <span class="number">18</span>, gender: <span class="string">'male'</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> human2: Human = x;  <span class="comment">//这里不会报错，pass</span></span><br></pre></td></tr></table></figure><p>至于这样设计的目的，应该是可以让我们少些一些代码。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h1&gt;&lt;p&gt;函数其实也是对象，只是是一个特殊的对象，是&lt;strong&gt;可以被调用（call）的对象&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;函数类型&quot;&gt;&lt;a href=&quot;#函数类型&quot; class=&quot;headerlink&quot; title=&quot;函数类型&quot;&gt;&lt;/a&gt;函数类型&lt;/h2&gt;&lt;figure class=&quot;highlight ts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x: &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;, y: &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;&lt;/span&gt;): &lt;span class=&quot;title&quot;&gt;number&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x + y;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ley add2 = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x: &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;, y: &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;&lt;/span&gt;): &lt;span class=&quot;title&quot;&gt;number&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x + y;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;给每个参数添加类型之后再为函数本身添加返回值的类型，ts可以根据返回语句自动推断出返回值类型，如果实际返回值不是规定的类型就会报错。&lt;/p&gt;
    
    </summary>
    
      <category term="TypeScript学习" scheme="http://yoursite.com/categories/TypeScript%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="TypeScript" scheme="http://yoursite.com/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript-类</title>
    <link href="http://yoursite.com/2019/06/19/typescript-learning2/"/>
    <id>http://yoursite.com/2019/06/19/typescript-learning2/</id>
    <published>2019-06-19T14:58:05.000Z</published>
    <updated>2019-06-20T09:14:57.700Z</updated>
    
    <content type="html"><![CDATA[<h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><h2 id="类的声明"><a href="#类的声明" class="headerlink" title="类的声明"></a>类的声明</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Human &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;;</span><br><span class="line">    move() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'可以行走...'</span>)</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jack = <span class="keyword">new</span> Human(<span class="string">'jack'</span>, <span class="number">18</span>)  <span class="comment">// jack ==&gt; &#123;'jack', 18&#125;</span></span><br></pre></td></tr></table></figure><p>类的声明用<code>class</code>修饰符，内部可以使用构造器<code>constructor</code>，构造器<code>constructor</code>是一个函数，可以让我们用<code>new ...</code>来实例化一个对象，并且<code>constructor</code>的参数可以设置默认值；<code>Human</code>类内部可以定义方法，类似上述<code>move</code>函数。</p><a id="more"></a><h2 id="类的静态属性"><a href="#类的静态属性" class="headerlink" title="类的静态属性"></a>类的静态属性</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Human &#123;</span><br><span class="line">    <span class="keyword">static</span> a = <span class="number">1</span>;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jack = <span class="keyword">new</span> Human(<span class="string">'jack'</span>, <span class="number">18</span>)</span><br></pre></td></tr></table></figure><p>类的静态属性用<code>static</code>修饰符，每个实例想要访问这个属性的时候，都要类似于<code>jack.a</code>来访问。</p><h2 id="类的私有属性"><a href="#类的私有属性" class="headerlink" title="类的私有属性"></a>类的私有属性</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Human &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">    <span class="keyword">private</span> secret: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.secret = <span class="string">'这是我的秘密'</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jack = <span class="keyword">new</span> Human(<span class="string">'jack'</span>, <span class="number">18</span>)</span><br><span class="line"><span class="built_in">console</span>.log(jack.secret)  <span class="comment">// ==&gt; 报错</span></span><br></pre></td></tr></table></figure><p>类的私有属性使用<code>private</code>修饰符，<code>jack</code>访问<code>secret</code>属性时会报错，<code>secret</code>属性只能在<code>Human</code>类种使用。这里增加一点说明，<code>name</code>和<code>age</code>属性默认是<code>public</code>，其实是这样：<code>public name: string;</code> <code>public age: number;</code>。</p><h2 id="readonly修饰符"><a href="#readonly修饰符" class="headerlink" title="readonly修饰符"></a>readonly修饰符</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Human &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    readonly age: <span class="built_in">number</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jack = <span class="keyword">new</span> Human(<span class="string">'jack'</span>, <span class="number">18</span>)</span><br><span class="line">jack.age = <span class="number">8</span>  <span class="comment">// 报错，age是只读的</span></span><br></pre></td></tr></table></figure><p>用<code>readonly</code>关键字将属性设置为只读，只读属性必须在声明时或这早函数里被初始化。</p><h2 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">    <span class="keyword">type</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"><span class="keyword">type</span>: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.type = <span class="keyword">type</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    move(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> Human <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">'哺乳动物'</span>);</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jack = <span class="keyword">new</span> Human(<span class="string">'jack'</span>, <span class="number">18</span>)  <span class="comment">// jack ==&gt; &#123;'jack', 18&#125;</span></span><br></pre></td></tr></table></figure><p>类的继承也是用修饰符<code>extends</code>来实现，<strong>并且</strong>，<code>Human</code>继承<code>Animal</code>，在<code>Human</code>的<code>constructor</code>内需要调用<code>super()</code>；上述代码中，<code>super(&#39;哺乳动物&#39;)</code>相当于调用了<code>Animal</code>种的<code>constructor()</code>，这样<code>jack</code>就有了<code>type</code>属性，并且<code>jack.type === &#39;哺乳动物&#39;</code>。</p><h2 id="理解protected"><a href="#理解protected" class="headerlink" title="理解protected"></a>理解protected</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">    <span class="keyword">type</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">protected</span> hand: <span class="built_in">boolean</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"><span class="keyword">type</span>: <span class="built_in">string</span>, hand: <span class="built_in">boolean</span></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.type = <span class="keyword">type</span>;</span><br><span class="line">        <span class="keyword">this</span>.hand = hand</span><br><span class="line">    &#125;;</span><br><span class="line">    move(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> Human <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">'哺乳动物'</span>, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jack = <span class="keyword">new</span> Human(<span class="string">'jack'</span>, <span class="number">18</span>)</span><br><span class="line"><span class="built_in">console</span>.log(jack.hand)  <span class="comment">// ==&gt; 报错</span></span><br></pre></td></tr></table></figure><p><code>protected</code>修饰符雨<code>private</code>类似，但有一点不同，<code>protected</code>成员在它的子类仍然可以使用，而<code>private</code>就不可以。</p><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p>抽象类也可以叫做“爸爸类”：专门当作别的类的爸爸的类；也可以叫做“没有写完的类”：只描述有什么方法，并没有完全实现这些方法。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> Animal &#123;</span><br><span class="line">    <span class="keyword">abstract</span> makeNoice(): <span class="built_in">void</span> &#123;&#125;;</span><br><span class="line">    move(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> animal = <span class="keyword">new</span> Animal() <span class="comment">// 报错，因为Animal是抽象类，makeNoice方法并没有写完</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Human <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;;</span><br><span class="line">    makeNoice(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'说普通话'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jack = <span class="keyword">new</span> Human(<span class="string">'jack'</span>, <span class="number">18</span>)</span><br></pre></td></tr></table></figure><ol><li>抽象类要在声明时前面加<code>abstract</code>修饰符；</li><li>抽象类内部有一个方法，这个方法并不能在当时写全，那这个方法前面加一个<code>abstract</code>修饰符；</li><li>由如上述代码中，<code>new Animal()</code>实例化会报错，因为内部有方法并没有写全；</li><li>父类中如果有未写完的方法，那子类（非抽象类）中需要写完它；</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;类&quot;&gt;&lt;a href=&quot;#类&quot; class=&quot;headerlink&quot; title=&quot;类&quot;&gt;&lt;/a&gt;类&lt;/h1&gt;&lt;h2 id=&quot;类的声明&quot;&gt;&lt;a href=&quot;#类的声明&quot; class=&quot;headerlink&quot; title=&quot;类的声明&quot;&gt;&lt;/a&gt;类的声明&lt;/h2&gt;&lt;figure class=&quot;highlight ts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; Human &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name: &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    age: &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name: &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;, age: &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age = age;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    move() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;可以行走...&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; jack = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Human(&lt;span class=&quot;string&quot;&gt;&#39;jack&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;)  &lt;span class=&quot;comment&quot;&gt;// jack ==&amp;gt; &amp;#123;&#39;jack&#39;, 18&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;类的声明用&lt;code&gt;class&lt;/code&gt;修饰符，内部可以使用构造器&lt;code&gt;constructor&lt;/code&gt;，构造器&lt;code&gt;constructor&lt;/code&gt;是一个函数，可以让我们用&lt;code&gt;new ...&lt;/code&gt;来实例化一个对象，并且&lt;code&gt;constructor&lt;/code&gt;的参数可以设置默认值；&lt;code&gt;Human&lt;/code&gt;类内部可以定义方法，类似上述&lt;code&gt;move&lt;/code&gt;函数。&lt;/p&gt;
    
    </summary>
    
      <category term="TypeScript学习" scheme="http://yoursite.com/categories/TypeScript%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="TypeScript" scheme="http://yoursite.com/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript基础</title>
    <link href="http://yoursite.com/2019/06/14/typescript-learning1/"/>
    <id>http://yoursite.com/2019/06/14/typescript-learning1/</id>
    <published>2019-06-14T03:04:52.000Z</published>
    <updated>2019-06-19T14:53:37.178Z</updated>
    
    <content type="html"><![CDATA[<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul><li>JS七种数据类型（number、string、undefined、null、object、boolean、symbol）</li><li>any<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> n1:<span class="built_in">number</span> = <span class="number">1</span></span><br><span class="line">n1 = <span class="string">'1'</span>  <span class="comment">// error</span></span><br><span class="line"><span class="keyword">let</span> n2:<span class="built_in">any</span> = <span class="number">2</span></span><br><span class="line">n2 = <span class="string">'2'</span>  <span class="comment">// pass</span></span><br></pre></td></tr></table></figure></li></ul><p>如果一个变量在赋值时声明了是<code>number</code>，后面如果把不是<code>number</code>的数据赋值给<strong>n1</strong>，那就会<strong>报错</strong>；如果一个变量在赋值时声明的时<code>any</code>，后面可以把任何类型的数据赋值给<strong>n2</strong></p><a id="more"></a><ul><li>枚举(enum)<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Gender &#123; Man, Woman &#125;</span><br><span class="line"><span class="keyword">let</span> jack:Gender = Gender.Man</span><br><span class="line"><span class="built_in">console</span>.log(jack)  <span class="comment">// =&gt; 0</span></span><br><span class="line">jack = Gender.Woman</span><br><span class="line"><span class="built_in">console</span>.log(jack)  <span class="comment">// =&gt; 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> Gender1 = &#123; Man=<span class="string">'man'</span>, Woman=<span class="string">'woman'</span> &#125;</span><br><span class="line"><span class="keyword">let</span> jack:Gender1 = Gender1.Man</span><br><span class="line"><span class="built_in">console</span>.log(jack)  <span class="comment">// =&gt; 'man'</span></span><br><span class="line">jack = Gender1.Woman</span><br><span class="line"><span class="built_in">console</span>.log(jack)  <span class="comment">// =&gt; 'woman'</span></span><br></pre></td></tr></table></figure></li></ul><p>枚举用关键字<code>enum</code>来声明，默认情况下，元素编号从0开始，所以第一种情况的<strong>jack</strong>值默认是0。也可以手动指定成员的数据，就类似上述第二种情况。如果在给<strong>jack</strong>赋值时，不小心赋值了类似于<code>Gender.Men</code>，这样就会<strong>报错</strong>；</p><ul><li><p>void<br>代表空类型，一般用在没有返回值的函数声明时，类似于下述情况：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">b: <span class="built_in">any</span></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>never</p></li></ul><p>小tips：默认情况下，<code>null</code>或<code>undefined</code>是所有类型的子类型，就是说可以把<code>null</code>或<code>undefined</code>赋值给<code>number</code>、<code>string</code>等类型的变量。</p><h2 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str1: <span class="built_in">any</span> = <span class="string">'123'</span></span><br><span class="line"><span class="built_in">console</span>.log( (&lt;<span class="built_in">string</span>&gt;str1).split(<span class="string">''</span>) )  <span class="comment">// =&gt; pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str2: <span class="built_in">any</span> = <span class="string">'123'</span></span><br><span class="line"><span class="built_in">console</span>.log( (str2 <span class="keyword">as</span> <span class="built_in">string</span>).split(<span class="string">''</span>) )  <span class="comment">// =&gt; pass</span></span><br></pre></td></tr></table></figure><p>有两种形式：1.<code>&lt;string&gt;str</code>  2.<code>str2 as string</code><br>通过类型断言这种方式可以告诉编译器，“相信我，我知道自己在干什么”。类型断言好比其它语言里的类型转换，但是不进行特殊的数据检查和解构。它没有运行时的影响，只是在编译阶段起作用。TypeScript会假设你，程序员，已经进行了必须的检查。</p><hr><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><h2 id="接口基础"><a href="#接口基础" class="headerlink" title="接口基础"></a>接口基础</h2><p>接口就是用代码描述一个对象<strong>必须</strong>有什么属性或者方法，但是有没有其他属性或方法就不管。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Human &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jack: Human = &#123;name: <span class="string">'jack'</span>, age: <span class="number">18</span>&#125;</span><br></pre></td></tr></table></figure><p>接口用关键字<code>interface</code>来声明，例如上述代码，如果<strong>jack</strong>对象声明时少了<code>name</code>或者<code>age</code>属性，就会报错。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Head &#123;</span><br><span class="line">    eye: <span class="built_in">number</span>;</span><br><span class="line">    nose: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> Human &#123;</span><br><span class="line">    readonly name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">    head: Head;</span><br><span class="line">    likedGame?: <span class="built_in">Array</span>&lt;<span class="built_in">string</span>&gt;;</span><br><span class="line">    say(word: <span class="built_in">string</span>) : <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jsck: Human = &#123;</span><br><span class="line">    name: <span class="string">'jack'</span>,</span><br><span class="line">    age: <span class="number">18</span>,</span><br><span class="line">    head: &#123;eye: <span class="number">2</span>, nose: <span class="number">1</span>&#125;,</span><br><span class="line">    say(word: <span class="built_in">string</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(word)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">jack.name = <span class="string">'gavin'</span>  <span class="comment">// =&gt; error</span></span><br></pre></td></tr></table></figure><ul><li>如果一个接口内定义了必须还有对象，就类似上述再声明另一个接口；</li><li>如果一个接口内定义了必须有一个方法，就类似上述在接口内部直接定一个方法；</li><li>以上述代码为例，在接口定义时，在某一个属性前加一个<code>readonly</code>关键字，后面如果对<strong>jsck</strong>的<code>name</code>属性做修改就会<strong>报错</strong>；</li><li>如果定义一个接口时，在某个属性后面加一个<code>？</code>，表述对象声明时可以不声明这个对象，类似上述代码种的<code>likedGame</code>；</li></ul><h2 id="接口描述函数"><a href="#接口描述函数" class="headerlink" title="接口描述函数"></a>接口描述函数</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> SearchFunc &#123;</span><br><span class="line">    (a: <span class="built_in">string</span>, b: <span class="built_in">string</span>): <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> searchF = <span class="function"><span class="keyword">function</span> (<span class="params">c: <span class="built_in">string</span>, d: <span class="built_in">string</span></span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由如上述代码定义一个描述函数的接口，注意：上述a、b并不与c、d有什么关系。</p><p>如果接口描述的函数，这个函数内也有一个属性也是函数？代码如下：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> 二则运算 &#123;</span><br><span class="line">    (a: <span class="built_in">number</span>, b: <span class="built_in">number</span>): <span class="built_in">number</span>;</span><br><span class="line">    逆运算(a: <span class="built_in">number</span>, b: <span class="built_in">number</span>): <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> fn = ((): 二则运算 =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> x: <span class="built_in">any</span> = <span class="function"><span class="keyword">function</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    x.逆运算 = <span class="function"><span class="keyword">function</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a - b;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> add: 二则运算 = fn();</span><br></pre></td></tr></table></figure><h2 id="接口的继承"><a href="#接口的继承" class="headerlink" title="接口的继承"></a>接口的继承</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="keyword">interface</span> Animal &#123;</span><br><span class="line">    move(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> Human <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jack: Human = &#123;</span><br><span class="line">    name: <span class="string">'jack'</span>,</span><br><span class="line">    age: <span class="number">18</span>,</span><br><span class="line">    move() &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口的继承用关键字<code>extends</code>来实现，上述代码中，如果声明<strong>jack</strong>时没有声明<code>move</code>方法就会<strong>报错</strong>。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="keyword">interface</span> Animal &#123;</span><br><span class="line">    move(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> Human &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> Gen <span class="keyword">extends</span> Human, Animal &#123;</span><br><span class="line">    gender: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jack: Gen = &#123;</span><br><span class="line">    name: <span class="string">'jack'</span>,</span><br><span class="line">    age: <span class="number">18</span>,</span><br><span class="line">    gender: <span class="string">'man'</span>;</span><br><span class="line">    move() &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个接口可以继承多个接口，由如上述代码<code>Gen extends Human, Animal</code>，继承的多个接口用逗号隔开；当然上述代码中，声明<code>Human</code>接口时也可以继承<code>Animal</code>=&gt;<code>Human extends Animal</code>。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; class=&quot;headerlink&quot; title=&quot;变量&quot;&gt;&lt;/a&gt;变量&lt;/h1&gt;&lt;h2 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink&quot; title=&quot;数据类型&quot;&gt;&lt;/a&gt;数据类型&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;JS七种数据类型（number、string、undefined、null、object、boolean、symbol）&lt;/li&gt;
&lt;li&gt;any&lt;figure class=&quot;highlight ts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; n1:&lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;n1 = &lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;// error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; n2:&lt;span class=&quot;built_in&quot;&gt;any&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;n2 = &lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;// pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果一个变量在赋值时声明了是&lt;code&gt;number&lt;/code&gt;，后面如果把不是&lt;code&gt;number&lt;/code&gt;的数据赋值给&lt;strong&gt;n1&lt;/strong&gt;，那就会&lt;strong&gt;报错&lt;/strong&gt;；如果一个变量在赋值时声明的时&lt;code&gt;any&lt;/code&gt;，后面可以把任何类型的数据赋值给&lt;strong&gt;n2&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="TypeScript学习" scheme="http://yoursite.com/categories/TypeScript%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="TypeScript" scheme="http://yoursite.com/tags/TypeScript/"/>
    
  </entry>
  
</feed>
