<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ShiXiang&#39;s Notes</title>
  
  <subtitle>Quick notes</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-08-08T15:33:07.009Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Shi Xiang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>工作中遇到的坑</title>
    <link href="http://yoursite.com/2019/08/02/%E5%B7%A5%E4%BD%9C%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/"/>
    <id>http://yoursite.com/2019/08/02/工作中遇到的坑/</id>
    <published>2019-08-02T15:02:35.000Z</published>
    <updated>2019-08-08T15:33:07.009Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IOS-H5页面播放视频问题"><a href="#IOS-H5页面播放视频问题" class="headerlink" title="IOS H5页面播放视频问题"></a>IOS H5页面播放视频问题</h1><h1 id="前端处理文件sha256值"><a href="#前端处理文件sha256值" class="headerlink" title="前端处理文件sha256值"></a>前端处理文件sha256值</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;IOS-H5页面播放视频问题&quot;&gt;&lt;a href=&quot;#IOS-H5页面播放视频问题&quot; class=&quot;headerlink&quot; title=&quot;IOS H5页面播放视频问题&quot;&gt;&lt;/a&gt;IOS H5页面播放视频问题&lt;/h1&gt;&lt;h1 id=&quot;前端处理文件sha256值&quot;&gt;&lt;a
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="H5" scheme="http://yoursite.com/tags/H5/"/>
    
  </entry>
  
  <entry>
    <title>React useState</title>
    <link href="http://yoursite.com/2019/07/14/useState/"/>
    <id>http://yoursite.com/2019/07/14/useState/</id>
    <published>2019-07-14T15:43:00.000Z</published>
    <updated>2019-11-28T06:53:45.186Z</updated>
    
    <content type="html"><![CDATA[<h2 id="useState-基础用法"><a href="#useState-基础用法" class="headerlink" title="useState 基础用法"></a>useState 基础用法</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [n, setN] = React.useState(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">"app"</span>&gt;</span><br><span class="line">      &lt;p&gt;&#123;n&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;() =&gt; setN(n + 1)&#125;&gt;n+1&lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">ReactDOM.render(&lt;App /</span>&gt;, rootElement);</span><br></pre></td></tr></table></figure><a id="more"></a><ul><li>首次渲染：<code>render &lt;App /&gt;</code>，调用 App 函数，得到虚拟 div（一个对象），创建真实 div；</li><li>当点击 button 时，会调用 setN 函数，再次 <code>render &lt;App /&gt;</code>；</li><li>再次调用 App 函数，得到虚拟 div，DOM diff 更新真实 div；<br>每次运行 App 函数，都会运行<code>useState(0)</code>，由此看似运行<code>useState(0)</code>，变量 n 又是 0，但其实不然，第二次调用时 n 变为了 1。</li></ul><h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><ul><li><code>setN</code>一定会修改某个数据 x，把<code>n+1</code>的值存入 x；</li><li><code>setN</code>一定会出发<code>App()</code>，重新渲染；</li><li><code>useState</code>肯定会从数据 x 里读取 n 的最新值；</li><li>那每个组件应该会有自己的一个数据 x，暂时将其命名为<code>state</code><br><code>useState</code>原理类似如下代码：</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> _state;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myUseState</span>(<span class="params">initialValue</span>) </span>&#123;</span><br><span class="line">  _state = _state || initialValue;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setState</span>(<span class="params">newState</span>) </span>&#123;</span><br><span class="line">    _state = newState;</span><br><span class="line">    render();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> [_state, setState];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> render = <span class="function"><span class="params">()</span> =&gt;</span> ReactDOM.render(&lt;App /&gt;, rootElement);</span><br><span class="line"></span><br><span class="line">function App() &#123;</span><br><span class="line">  const [n, setN] = myUseState(0);</span><br><span class="line">  return (</span><br><span class="line">    &lt;div className="App"&gt;</span><br><span class="line">      &lt;p&gt;&#123;n&#125;&lt;/p&gt;</span><br><span class="line">      &lt;p&gt;</span><br><span class="line">        &lt;button onClick=&#123;() =&gt; setN(n + 1)&#125;&gt;+1&lt;/button&gt;</span><br><span class="line">      &lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(&lt;App /&gt;, rootElement);</span><br></pre></td></tr></table></figure><p>这样的原理，其实还是有问题的，因为如果 App 函数内不止一次调用了<code>useState</code>函数，那这个 state 就会冲突。</p><h2 id="进一步源码改进"><a href="#进一步源码改进" class="headerlink" title="进一步源码改进"></a>进一步源码改进</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> _state = [];</span><br><span class="line"><span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myUseState</span>(<span class="params">initialValue</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> currentIndex = index;</span><br><span class="line">  index += <span class="number">1</span>;</span><br><span class="line">  _state[currentIndex] = _state[currentIndex] || initialValue;</span><br><span class="line">  <span class="keyword">const</span> setState = <span class="function"><span class="params">newState</span> =&gt;</span> &#123;</span><br><span class="line">    _state[currentIndex] = newState;</span><br><span class="line">    render();</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> [_state[currentIndex], setState];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> render = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  index = <span class="number">0</span>;</span><br><span class="line">  ReactDOM.render(&lt;App /&gt;, rootElement);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">function App() &#123;</span><br><span class="line">  const [n, setN] = myUseState(0);</span><br><span class="line">  const [m, setM] = myUseState(0);</span><br><span class="line">  console.log(_state);</span><br><span class="line">  return (</span><br><span class="line">    &lt;div className="App"&gt;</span><br><span class="line">      &lt;p&gt;&#123;n&#125;&lt;/p&gt;</span><br><span class="line">      &lt;p&gt;</span><br><span class="line">        &lt;button onClick=&#123;() =&gt; setN(n + 1)&#125;&gt;+1&lt;/button&gt;</span><br><span class="line">      &lt;/p&gt;</span><br><span class="line">      &lt;p&gt;&#123;m&#125;&lt;/p&gt;</span><br><span class="line">      &lt;p&gt;</span><br><span class="line">        &lt;button onClick=&#123;() =&gt; setM(m + 1)&#125;&gt;+1&lt;/button&gt;</span><br><span class="line">      &lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(&lt;App /&gt;, rootElement);</span><br></pre></td></tr></table></figure><p>用次方案会有一个缺陷，就是调用<code>useState</code>一定要注意顺序，所以再调用时，一定不能放在<code>if</code>里边。而实际调用<code>useState</code>时如果放在了<code>if</code>内，React 会报错。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>每个函数组件对应一个<code>React</code>节点</li><li>每个节点保存着<code>state</code>和<code>index</code></li><li><code>useState</code>会读取<code>state[index]</code></li><li><code>index</code>由<code>useState</code>出现的顺序决定</li><li><code>setState</code>会修改<code>state</code>，并处罚更新</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;useState-基础用法&quot;&gt;&lt;a href=&quot;#useState-基础用法&quot; class=&quot;headerlink&quot; title=&quot;useState 基础用法&quot;&gt;&lt;/a&gt;useState 基础用法&lt;/h2&gt;&lt;figure class=&quot;highlight jsx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;App&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; [n, setN] = React.useState(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;div className=&lt;span class=&quot;string&quot;&gt;&quot;app&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;p&amp;gt;&amp;#123;n&amp;#125;&amp;lt;&lt;span class=&quot;regexp&quot;&gt;/p&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;      &amp;lt;button onClick=&amp;#123;() =&amp;gt; setN(n + 1)&amp;#125;&amp;gt;n+1&amp;lt;/&lt;/span&gt;button&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;&lt;span class=&quot;regexp&quot;&gt;/div&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;  );&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;ReactDOM.render(&amp;lt;App /&lt;/span&gt;&amp;gt;, rootElement);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="React" scheme="http://yoursite.com/categories/React/"/>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>React Hooks</title>
    <link href="http://yoursite.com/2019/07/14/Hooks/"/>
    <id>http://yoursite.com/2019/07/14/Hooks/</id>
    <published>2019-07-14T15:43:00.000Z</published>
    <updated>2019-11-29T09:29:33.394Z</updated>
    
    <content type="html"><![CDATA[<h1 id="useState"><a href="#useState" class="headerlink" title="useState"></a>useState</h1><h2 id="使用状态"><a href="#使用状态" class="headerlink" title="使用状态"></a>使用状态</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [n, setN] = React.useStaet(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">const</span> [user, setUser] = React.useState(&#123; <span class="attr">name</span>: <span class="string">"F"</span> &#125;);</span><br></pre></td></tr></table></figure><ul><li>注意事项：不可局部更新，地址要变</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [user, setUser] = useState(&#123; <span class="attr">name</span>: <span class="string">"Frank"</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;);</span><br><span class="line">  <span class="keyword">const</span> onClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    setUser(&#123;</span><br><span class="line">      name: <span class="string">"Jack"</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">"App"</span>&gt;</span><br><span class="line">      &lt;h1&gt;&#123;user.name&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">      &lt;h2&gt;&#123;user.age&#125;&lt;/</span>h2&gt;</span><br><span class="line">      &lt;button onClick=&#123;onClick&#125;&gt;Click&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>如果是这样更新<code>user</code>对象，实际并未更新，需要重新一个对象传给<code>setUser</code>函数，实际上，<code>setState(obj)</code>如果<code>obj</code>地址不变，那么 React 就认为数据没有变化。通常以<code>setUser({...user, name: &#39;Jack&#39;})</code>的方式来更新。因为<code>setState</code>不会帮我们合并属性，其实<code>useReducer</code>也不会合并属性。</p><h2 id="useState-接受函数"><a href="#useState-接受函数" class="headerlink" title="useState 接受函数"></a>useState 接受函数</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [state, setState] = useState(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> initialState;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>该函数返回初始<code>state</code>，并且只执行一次</p><h2 id="setState-接受函数"><a href="#setState-接受函数" class="headerlink" title="setState 接受函数"></a>setState 接受函数</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [n, setN] = useState(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> onClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    setN(n + <span class="number">1</span>);</span><br><span class="line">    setN(n + <span class="number">1</span>); <span class="comment">// 你会发现 n 不能加 2</span></span><br><span class="line">    <span class="comment">// setN(i=&gt;i+1)</span></span><br><span class="line">    <span class="comment">// setN(i=&gt;i+1)</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">"App"</span>&gt;</span><br><span class="line">      &lt;h1&gt;n: &#123;n&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;onClick&#125;&gt;+2&lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>在这种时候，需要不止一次调用的时候，就需要传函数来实现，如果能接受这种形式，应该优先使用这种式。</p><h1 id="useReducer"><a href="#useReducer" class="headerlink" title="useReducer"></a>useReducer</h1><h2 id="使用-useReducer，用来践行-Flux-Redux-的思想"><a href="#使用-useReducer，用来践行-Flux-Redux-的思想" class="headerlink" title="使用 useReducer，用来践行 Flux/Redux 的思想"></a>使用 useReducer，用来践行 Flux/Redux 的思想</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> initial = &#123;</span><br><span class="line">  n: <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reducer = <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (action.type === <span class="string">"add"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">n</span>: state.n + action.number &#125;;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (action.type === <span class="string">"multi"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">n</span>: state.n * <span class="number">2</span> &#125;;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"unknown type"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [state, dispatch] = useReducer(reducer, initial);</span><br><span class="line">  <span class="keyword">const</span> &#123; n &#125; = state;</span><br><span class="line">  <span class="keyword">const</span> onClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    dispatch(&#123; <span class="attr">type</span>: <span class="string">"add"</span>, <span class="attr">number</span>: <span class="number">1</span> &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> onClick2 = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    dispatch(&#123; <span class="attr">type</span>: <span class="string">"add"</span>, <span class="attr">number</span>: <span class="number">2</span> &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">"App"</span>&gt;</span><br><span class="line">      &lt;h1&gt;n: &#123;n&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;onClick&#125;&gt;+1&lt;/</span>button&gt;</span><br><span class="line">      &lt;button onClick=&#123;onClick2&#125;&gt;+<span class="number">2</span>&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>创建初始值<code>initialState</code>；</li><li>创建所有操作<code>reducer(state, action)</code>；</li><li>传给<code>useReducer</code>，得到读和写 API；</li><li>调用 =&gt; <code>({ type: &#39;操作类型&#39; })</code><br>总的来说，<code>useReducer</code>是<code>useState</code>的复杂版</li></ol><h2 id="如何代替-Redux"><a href="#如何代替-Redux" class="headerlink" title="如何代替 Redux"></a>如何代替 Redux</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = &#123;</span><br><span class="line">  user: <span class="literal">null</span>,</span><br><span class="line">  books: <span class="literal">null</span>,</span><br><span class="line">  movies: <span class="literal">null</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">state, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"setUser"</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; ...state, <span class="attr">user</span>: action.user &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"setBooks"</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; ...state, <span class="attr">books</span>: action.books &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"setMovies"</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; ...state, <span class="attr">movies</span>: action.movies &#125;;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Context = React.createContext(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [state, dispatch] = useReducer(reducer, store);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> api = &#123; state, dispatch &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Context.Provider value=&#123;api&#125;&gt;</span><br><span class="line">      &lt;User /&gt;</span><br><span class="line">      &lt;hr /&gt;</span><br><span class="line">      &lt;Books /&gt;</span><br><span class="line">      &lt;Movies /&gt;</span><br><span class="line">    &lt;<span class="regexp">/Context.Provider&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">function User() &#123;</span></span><br><span class="line"><span class="regexp">  const &#123; state, dispatch &#125; = useContext(Context);</span></span><br><span class="line"><span class="regexp">  useEffect(() =&gt; &#123;</span></span><br><span class="line"><span class="regexp">    ajax("/u</span>ser<span class="string">").then(user =&gt; &#123;</span></span><br><span class="line"><span class="string">      dispatch(&#123; type: "</span>setUser<span class="string">", user: user &#125;);</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">  &#125;, []);</span></span><br><span class="line"><span class="string">  return (</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;h1&gt;个人信息&lt;/h1&gt;</span></span><br><span class="line"><span class="string">      &lt;div&gt;name: &#123;state.user ? state.user.name : "</span><span class="string">"&#125;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  );</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">function Books() &#123;</span></span><br><span class="line"><span class="string">  const &#123; state, dispatch &#125; = useContext(Context);</span></span><br><span class="line"><span class="string">  useEffect(() =&gt; &#123;</span></span><br><span class="line"><span class="string">    ajax("</span>/books<span class="string">").then(books =&gt; &#123;</span></span><br><span class="line"><span class="string">      dispatch(&#123; type: "</span>setBooks<span class="string">", books: books &#125;);</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">  &#125;, []);</span></span><br><span class="line"><span class="string">  return (</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;h1&gt;我的书籍&lt;/h1&gt;</span></span><br><span class="line"><span class="string">      &lt;ol&gt;</span></span><br><span class="line"><span class="string">        &#123;state.books</span></span><br><span class="line"><span class="string">          ? state.books.map(book =&gt; &lt;li key=&#123;book.id&#125;&gt;&#123;book.name&#125;&lt;/li&gt;)</span></span><br><span class="line"><span class="string">          : "</span>加载中<span class="string">"&#125;</span></span><br><span class="line"><span class="string">      &lt;/ol&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  );</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">function Movies() &#123;</span></span><br><span class="line"><span class="string">  const &#123; state, dispatch &#125; = useContext(Context);</span></span><br><span class="line"><span class="string">  useEffect(() =&gt; &#123;</span></span><br><span class="line"><span class="string">    ajax("</span>/movies<span class="string">").then(movies =&gt; &#123;</span></span><br><span class="line"><span class="string">      dispatch(&#123; type: "</span>setMovies<span class="string">", movies: movies &#125;);</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">  &#125;, []);</span></span><br><span class="line"><span class="string">  return (</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;h1&gt;我的电影&lt;/h1&gt;</span></span><br><span class="line"><span class="string">      &lt;ol&gt;</span></span><br><span class="line"><span class="string">        &#123;state.movies</span></span><br><span class="line"><span class="string">          ? state.movies.map(movie =&gt; &lt;li key=&#123;movie.id&#125;&gt;&#123;movie.name&#125;&lt;/li&gt;)</span></span><br><span class="line"><span class="string">          : "</span>加载中<span class="string">"&#125;</span></span><br><span class="line"><span class="string">      &lt;/ol&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  );</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const rootElement = document.getElementById("</span>root<span class="string">");</span></span><br><span class="line"><span class="string">ReactDOM.render(&lt;App /&gt;, rootElement);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 帮助函数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 假 ajax</span></span><br><span class="line"><span class="string">// 两秒钟后，根据 path 返回一个对象，必定成功不会失败</span></span><br><span class="line"><span class="string">function ajax(path) &#123;</span></span><br><span class="line"><span class="string">  return new Promise((resolve, reject) =&gt; &#123;</span></span><br><span class="line"><span class="string">    setTimeout(() =&gt; &#123;</span></span><br><span class="line"><span class="string">      if (path === "</span>/user<span class="string">") &#123;</span></span><br><span class="line"><span class="string">        resolve(&#123;</span></span><br><span class="line"><span class="string">          id: 1,</span></span><br><span class="line"><span class="string">          name: "</span>Frank<span class="string">"</span></span><br><span class="line"><span class="string">        &#125;);</span></span><br><span class="line"><span class="string">      &#125; else if (path === "</span>/books<span class="string">") &#123;</span></span><br><span class="line"><span class="string">        resolve([</span></span><br><span class="line"><span class="string">          &#123;</span></span><br><span class="line"><span class="string">            id: 1,</span></span><br><span class="line"><span class="string">            name: "</span>JavaScript 高级程序设计<span class="string">"</span></span><br><span class="line"><span class="string">          &#125;,</span></span><br><span class="line"><span class="string">          &#123;</span></span><br><span class="line"><span class="string">            id: 2,</span></span><br><span class="line"><span class="string">            name: "</span>JavaScript 精粹<span class="string">"</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        ]);</span></span><br><span class="line"><span class="string">      &#125; else if (path === "</span>/movies<span class="string">") &#123;</span></span><br><span class="line"><span class="string">        resolve([</span></span><br><span class="line"><span class="string">          &#123;</span></span><br><span class="line"><span class="string">            id: 1,</span></span><br><span class="line"><span class="string">            name: "</span>爱在黎明破晓前<span class="string">"</span></span><br><span class="line"><span class="string">          &#125;,</span></span><br><span class="line"><span class="string">          &#123;</span></span><br><span class="line"><span class="string">            id: 2,</span></span><br><span class="line"><span class="string">            name: "</span>恋恋笔记本<span class="string">"</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        ]);</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;, 2000);</span></span><br><span class="line"><span class="string">  &#125;);</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><ol><li>将数据集中在一个<code>store</code>对象中；</li><li>将所有操作集中在<code>reducer</code>；</li><li>创建一个<code>Context</code>；</li><li>创建对数据的读写 API；</li><li>将第四步的内容放到第三步的<code>Context</code>；</li><li>用<code>Context.Provider</code>将<code>Context</code>提供给所有组件；</li><li>各个组件用<code>useContext</code>获取读写 API；</li></ol><h1 id="useContext"><a href="#useContext" class="headerlink" title="useContext"></a>useContext</h1><h2 id="上下文"><a href="#上下文" class="headerlink" title="上下文"></a>上下文</h2><p><code>全局变量</code>是全局的<code>上下文</code>，<code>上下文</code>是局部的<code>全局变量</code>。</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> C = createContext(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"App 执行了"</span>);</span><br><span class="line">  <span class="keyword">const</span> [n, setN] = useState(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;C.Provider value=&#123;&#123; n, setN &#125;&#125;&gt;</span><br><span class="line">      &lt;div className=<span class="string">"App"</span>&gt;</span><br><span class="line">        &lt;Baba /&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>C.Provider&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Baba</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; n, setN &#125; = useContext(C);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      我是爸爸 n: &#123;n&#125; &lt;Child /&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">function Child() &#123;</span></span><br><span class="line"><span class="regexp">  const &#123; n, setN &#125; = useContext(C);</span></span><br><span class="line"><span class="regexp">  const onClick = () =&gt; &#123;</span></span><br><span class="line"><span class="regexp">    setN(i =&gt; i + 1);</span></span><br><span class="line"><span class="regexp">  &#125;;</span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;div&gt;</span></span><br><span class="line"><span class="regexp">      我是儿子 我得到的 n: &#123;n&#125;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;onClick&#125;&gt;+1&lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><ol><li>使用<code>C = createContext(initial)</code>创建上下文；</li><li>使用<code>&lt;C.provider&gt;</code>圈定作用域；</li><li>在作用域内使用<code>useContext(C)</code>来使用上下文；</li></ol><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>不是响应式，在一个模块降<code>C</code>里面的值改变，另一个模块不会感知到这个变化。</p><h1 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h1><h2 id="副作用"><a href="#副作用" class="headerlink" title="副作用"></a>副作用</h2><p>对环境的改变纪委副作用，如修改 document.title，但不一定非要吧副作用放在<code>useEffect</code>里，实际上叫做<code>afterRender</code>更好，每次 render 后运行。</p><h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><ul><li>作为<code>componentDidMount</code>使用，[]作第二个参数；</li><li>作为<code>componentDidUpdate</code>使用，可指定依赖；</li><li>作为<code>componentWillUnmount</code>使用，用过 return；<br>以上三种用途可以同时存在</li></ul><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>如果同时存在多个<code>useEffect</code>，会按照出现次序执行。</p><h1 id="useLayoutEffect"><a href="#useLayoutEffect" class="headerlink" title="useLayoutEffect"></a>useLayoutEffect</h1><h2 id="布局副作用"><a href="#布局副作用" class="headerlink" title="布局副作用"></a>布局副作用</h2><p><code>useEffect</code>在浏览器渲染完成后执行，<code>useLayoutEffect</code>在浏览器渲染前执行。</p><h2 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h2><ul><li><code>useLayoutEffect</code>总是比<code>useEffect</code>先执行</li><li><code>useLayoutEffect</code>里的任务最好影响了 Layout</li></ul><h2 id="经验"><a href="#经验" class="headerlink" title="经验"></a>经验</h2><p>为了用户体验，<code>useLayoutEffect</code>其实会增加 DOM 的渲染时间，优先使用<code>useEffect</code>。</p><h1 id="useMemo"><a href="#useMemo" class="headerlink" title="useMemo"></a>useMemo</h1><h2 id="如何理解-useMemo"><a href="#如何理解-useMemo" class="headerlink" title="如何理解 useMemo"></a>如何理解 useMemo</h2><p>首先要理解<code>useMemo</code>，必须要先将<code>React.memo</code>，示例代码如下：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [n, setN] = React.useState(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> [m, setM] = React.useState(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> onClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    setN(n + <span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">"App"</span>&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;button onClick=&#123;onClick&#125;&gt;update n &#123;n&#125;&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">      &#123;<span class="comment">/* &lt;Child data=&#123;m&#125; /&gt; */</span>&#125;</span><br><span class="line">      &lt;Child2 data=&#123;m&#125; /&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">function Child(props) &#123;</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ 假设这里有大量代码</span></span><br><span class="line"><span class="regexp">  console.log("child 执行了");</span></span><br><span class="line"><span class="regexp">  return &lt;div&gt;child: &#123;props.data&#125;&lt;/</span>div&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Child2 = React.memo(Child);</span><br></pre></td></tr></table></figure><p>这样使用了<code>React.memo</code>的<code>Child2</code>组件，在<code>n</code>变化时，<code>Child2</code>组件并不会重新<code>render</code>。但是，<code>React.memo</code>还是有一个问题，改造上述代码如下：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">const</span> onClickChild = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(m);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  retrun(</span><br><span class="line">    &lt;div className=<span class="string">"App"</span>&gt;</span><br><span class="line">      &lt;Child2 data=&#123;m&#125; onClick=&#123;onClickChild&#125; /&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ ...</span></span><br></pre></td></tr></table></figure><p>这样的话，即使<code>Child2</code>组件使用了<code>React.memo</code>，<code>Child2</code>组件还是会重新<code>render</code>，原因其实就是<code>onClickChild</code>被赋值了一个新的函数，新旧函数功能一样，但是地址是不一样的。<br>那如何解决这样的问题呢？所以出现了<code>useMemo</code>，修改代码如下：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">const</span> onClickChild = useMemo(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> fn = <span class="function"><span class="params">div</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"on click child, m: "</span> + m);</span><br><span class="line">      <span class="built_in">console</span>.log(div);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> fn;</span><br><span class="line">  &#125;, [m]);</span><br><span class="line"></span><br><span class="line">  retrun(</span><br><span class="line">    &lt;div className=<span class="string">"App"</span>&gt;</span><br><span class="line">      &lt;Child2 data=&#123;m&#125; onClick=&#123;onClickChild&#125; /&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ ...</span></span><br></pre></td></tr></table></figure><h2 id="useMemo-特点"><a href="#useMemo-特点" class="headerlink" title="useMemo 特点"></a>useMemo 特点</h2><ul><li>第一个参数是一个函数：<code>() =&gt; value</code>；</li><li>第二个参数是依赖<code>[m,n]</code>；</li><li>只有当依赖变化是，才会计算出新的<code>value</code>；</li><li>如果依赖不变，那么就重用之前的<code>value</code>；</li></ul><h2 id="useMemo-注意点"><a href="#useMemo-注意点" class="headerlink" title="useMemo 注意点"></a>useMemo 注意点</h2><p>如果上述<code>value</code>是一个函数，那可能就会写成这样：<code>useMemo(() =&gt; (x) =&gt; console.log(x))</code>，这是一个返回函数的函数。那会不会觉得很难用呢？于是出现了<code>useCallback</code>。</p><h1 id="useCallback"><a href="#useCallback" class="headerlink" title="useCallback"></a>useCallback</h1><p>修改上述代码，使用<code>useCallback</code>来代替<code>useMemo</code>。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// const onClickChild = useMemo(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   const fn = div =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     console.log("on click child, m: " + m);</span></span><br><span class="line"><span class="comment">//     console.log(div);</span></span><br><span class="line"><span class="comment">//   &#125;;</span></span><br><span class="line"><span class="comment">//   return fn;</span></span><br><span class="line"><span class="comment">// &#125;, [m]);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> onClickChild = useMemo(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"on click child, m: "</span> + m);</span><br><span class="line">&#125;, [m]);</span><br></pre></td></tr></table></figure><p><code>useCallback(x =&gt; log(x), [m])</code>等价于 useMemo<code>(() =&gt; x =&gt; log(x), [m])</code>。</p><h1 id="useRef"><a href="#useRef" class="headerlink" title="useRef"></a>useRef</h1><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>如果需要一个值，在组件不断 render 时保持不变，初始化：<code>const count = useRef(0)</code>，读取：<code>count.current</code>。为什么需要这样读取呢？原因是为了保证两次使用<code>useRef</code>是同一个值（引用了一个对象地址，地址不会变）。<br><code>useRef</code>不能自动是的组件自动 render，因为这不符合 React 的理念，如果想有这个功能，就必须自己加功能，要监听 ref，当<code>ref.current</code>变化是，调用<code>setN</code>即可。</p><h1 id="forwardRef"><a href="#forwardRef" class="headerlink" title="forwardRef"></a>forwardRef</h1><h1 id="useImperativeHandle"><a href="#useImperativeHandle" class="headerlink" title="useImperativeHandle"></a>useImperativeHandle</h1><h1 id="自定义-Hook"><a href="#自定义-Hook" class="headerlink" title="自定义 Hook"></a>自定义 Hook</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> useList = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [list, setList] = useState(<span class="literal">null</span>);</span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    ajax(<span class="string">"/list"</span>).then(<span class="function"><span class="params">list</span> =&gt;</span> &#123;</span><br><span class="line">      setList(list);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;, []); <span class="comment">// [] 确保只在第一次运行</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    list: list,</span><br><span class="line">    setList: setList</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve([</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">"Frank"</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">"Jack"</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">"Alice"</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">"Bob"</span> &#125;</span><br><span class="line">      ]);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; list, setList &#125; = useList();</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">"App"</span>&gt;</span><br><span class="line">      &lt;h1&gt;List&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">      &#123;list ? (</span></span><br><span class="line"><span class="regexp">        &lt;ol&gt;</span></span><br><span class="line"><span class="regexp">          &#123;list.map(item =&gt; (</span></span><br><span class="line"><span class="regexp">            &lt;li key=&#123;item.id&#125;&gt;&#123;item.name&#125;&lt;/</span>li&gt;</span><br><span class="line">          ))&#125;</span><br><span class="line">        &lt;<span class="regexp">/ol&gt;</span></span><br><span class="line"><span class="regexp">      ) : (</span></span><br><span class="line"><span class="regexp">        "加载中..."</span></span><br><span class="line"><span class="regexp">      )&#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上述代码，<code>useList</code>这个 api 就是自定义的。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;useState&quot;&gt;&lt;a href=&quot;#useState&quot; class=&quot;headerlink&quot; title=&quot;useState&quot;&gt;&lt;/a&gt;useState&lt;/h1&gt;&lt;h2 id=&quot;使用状态&quot;&gt;&lt;a href=&quot;#使用状态&quot; class=&quot;headerlink&quot; title=&quot;使用状态&quot;&gt;&lt;/a&gt;使用状态&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; [n, setN] = React.useStaet(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; [user, setUser] = React.useState(&amp;#123; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;F&quot;&lt;/span&gt; &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;注意事项：不可局部更新，地址要变&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight jsx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;App&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; [user, setUser] = useState(&amp;#123; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;Frank&quot;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;age&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;18&lt;/span&gt; &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; onClick = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setUser(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      name: &lt;span class=&quot;string&quot;&gt;&quot;Jack&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;div className=&lt;span class=&quot;string&quot;&gt;&quot;App&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;h1&amp;gt;&amp;#123;user.name&amp;#125;&amp;lt;&lt;span class=&quot;regexp&quot;&gt;/h1&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;      &amp;lt;h2&amp;gt;&amp;#123;user.age&amp;#125;&amp;lt;/&lt;/span&gt;h2&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;button onClick=&amp;#123;onClick&amp;#125;&amp;gt;Click&amp;lt;&lt;span class=&quot;regexp&quot;&gt;/button&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;    &amp;lt;/&lt;/span&gt;div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="React" scheme="http://yoursite.com/categories/React/"/>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>react造轮子-Icon组件</title>
    <link href="http://yoursite.com/2019/07/14/react%E9%80%A0%E8%BD%AE%E5%AD%90-2/"/>
    <id>http://yoursite.com/2019/07/14/react造轮子-2/</id>
    <published>2019-07-14T15:43:00.000Z</published>
    <updated>2019-11-22T03:50:13.984Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用-React-FunctionComponent-与接收-props"><a href="#使用-React-FunctionComponent-与接收-props" class="headerlink" title="使用 React.FunctionComponent 与接收 props"></a>使用 React.FunctionComponent 与接收 props</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> IconProps &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Icon: React.FunctionComponent&lt;IconProps&gt; = <span class="function"><span class="params">props</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &lt;span&gt;&#123;props.name&#125;&lt;<span class="regexp">/span&gt;;</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Icon;</span></span><br></pre></td></tr></table></figure><p>使用 function 定义一个组件时，需要使用<code>React.FunctionComponent</code>来指定组件的类型。如果要定义组件的<code>props</code>是符合哪个接口，就需要在<code>React.FunctionComponent</code>后面加<code>&lt;&#39;已定义好的interface&#39;&gt;</code>。这样定义后，在使用 Icon 组件时，name 属性传错是就会自动报错。</p><h2 id="引入-svg-文件"><a href="#引入-svg-文件" class="headerlink" title="引入 svg 文件"></a>引入 svg 文件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> wechat <span class="keyword">from</span> <span class="string">"./icon/wechat.svg"</span>;</span><br></pre></td></tr></table></figure><p>首先引入 svg 文件，这时候会报错，需要安装相应的 loader，并且 webpack 和 tsconfig 都需要做配置。</p><ul><li>安装<code>svg-sprite-loader</code>，并且在<code>webpack.config.js</code>文件做出相应 loader 配置</li><li>在 types 目录下的<code>custom.d.ts</code>文件中添加配置声明</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">declare <span class="built_in">module</span> <span class="string">'*.svg'</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> content: any;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> content;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在<code>tsconfig.json</code>文件内添加如下规则</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"include"</span>: [</span><br><span class="line">    <span class="string">"lib/**/*"</span>,</span><br><span class="line">    <span class="string">"types/**/*"</span></span><br><span class="line">],</span><br></pre></td></tr></table></figure><h2 id="在标签内使用-svg-文件"><a href="#在标签内使用-svg-文件" class="headerlink" title="在标签内使用 svg 文件"></a>在标签内使用 svg 文件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"./icon/wechat.svg"</span>;</span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line">interface IconProps &#123;</span><br><span class="line">  name: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Icon: React.FunctionComponent&lt;IconProps&gt; = <span class="function"><span class="params">props</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">      &lt;span&gt;</span><br><span class="line">          &lt;svg&gt;</span><br><span class="line">              &lt;use xlinkHref=<span class="string">"#wechat"</span>&#125;&lt;<span class="regexp">/use&gt;</span></span><br><span class="line"><span class="regexp">          &lt;/</span>svg&gt;</span><br><span class="line">      &lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Icon;</span></span><br></pre></td></tr></table></figure><h2 id="让-Icon-组件响应所有事件"><a href="#让-Icon-组件响应所有事件" class="headerlink" title="让 Icon 组件响应所有事件"></a>让 Icon 组件响应所有事件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">interface IconProps extends React.SVGAttributes&lt;SVGElement&gt; &#123;</span><br><span class="line">  name: string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>IconProps</code>这个接口，不可能把所有事件都定义一遍，因为事件太多了，只需<code>IconProps</code>接口继承与<code>React.SVGAttributes&lt;SVGElement&gt;</code>就可以。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;使用-React-FunctionComponent-与接收-props&quot;&gt;&lt;a href=&quot;#使用-React-FunctionComponent-与接收-props&quot; class=&quot;headerlink&quot; title=&quot;使用 React.FunctionCom
      
    
    </summary>
    
      <category term="TypeScript学习" scheme="http://yoursite.com/categories/TypeScript%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="React" scheme="http://yoursite.com/categories/TypeScript%E5%AD%A6%E4%B9%A0/React/"/>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
      <category term="TypeScript" scheme="http://yoursite.com/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>React造轮子-项目搭建</title>
    <link href="http://yoursite.com/2019/07/06/react%E9%80%A0%E8%BD%AE%E5%AD%90-1/"/>
    <id>http://yoursite.com/2019/07/06/react造轮子-1/</id>
    <published>2019-07-06T15:11:38.000Z</published>
    <updated>2019-07-10T15:07:10.478Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建目录与远程仓库"><a href="#创建目录与远程仓库" class="headerlink" title="创建目录与远程仓库"></a>创建目录与远程仓库</h2><p>在GitHub上新建一个远程仓库，创建时添加readme文件，然后使用<code>git clone</code>把远程仓库克隆到本地。</p><h2 id="npm初始化"><a href="#npm初始化" class="headerlink" title="npm初始化"></a>npm初始化</h2><p>进入到本地的项目目录，使用<code>npm init -y</code>命令，在本地新建一个<code>package.json</code>文件。</p><h2 id="安装webpack"><a href="#安装webpack" class="headerlink" title="安装webpack"></a>安装webpack</h2><p>使用<code>yarn add webpack webpack-cli --dev</code>命令，<code>dev</code>的意思就是安装到开发者的依赖里边，也就是在<code>package.json</code>文件中多了一个<code>devDependenceies</code>属性。</p><a id="more"></a><h2 id="新建lib-index-tsx文件"><a href="#新建lib-index-tsx文件" class="headerlink" title="新建lib/index.tsx文件"></a>新建lib/index.tsx文件</h2><p>在项目目录下，新建一个lib目录，lib目录下新建一个<code>index.tsx</code>文件，在文件内先随意写一行log代码。</p><h2 id="新建webpack-config-js"><a href="#新建webpack-config-js" class="headerlink" title="新建webpack.config.js"></a>新建webpack.config.js</h2><p>在项目目录下新建一个<code>webpack.config.js</code>文件，然后配置webpack：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    mode: <span class="string">'production'</span>,</span><br><span class="line">    entry: &#123;</span><br><span class="line">        index: <span class="string">'./lib/index.tsx'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'dist/lib'</span>),</span><br><span class="line">        library: <span class="string">'XinChen UI'</span>,</span><br><span class="line">        libraryTarget: <span class="string">'umd'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.tsx?$/</span>,</span><br><span class="line">                loader: <span class="string">'awesome-typescript-loader'</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>配置<code>entry</code>，这表示项目代码入口在哪里，目前先定为lib目录下的<code>index.tsx</code>文件；</li><li>配置<code>output</code>，这表示项目打包后所放置代码的位置，这里的<code>libray</code>表示项目最终的名称叫什么，<code>librayTarget</code>表示我们自己的库的格式是什么，；</li><li>配置<code>mudules.rules</code>，首先要处理<code>.tsx</code>文件，配置了<code>awesome-typescript-loader</code>这个loader，配置完后需要安装这个loader：<code>yarn add awesome-typescript-loader --dev</code>(安装所有的loader都是后面加<code>--dev</code>，因为loader只有开发者用到)；</li><li>安装typescript：<code>yarn add typescript --dev</code>，添加<code>tsconfig.json</code>和<code>tslint.json</code>文件;</li><li>配置<code>mode</code>，一般<code>mode</code>值为<code>production</code>或者<code>development</code>，第一次先设置为<code>production</code>；</li></ol><h2 id="安装webpack-dev-server与配置webpack-config-dev-js"><a href="#安装webpack-dev-server与配置webpack-config-dev-js" class="headerlink" title="安装webpack-dev-server与配置webpack.config.dev.js"></a>安装webpack-dev-server与配置webpack.config.dev.js</h2><p>首先安装webpack-dev-server：<code>yarn add webpack-dev-server --dev</code>，这样就可以使用命令<code>npx webpack-devserver</code>来启动项目；<br>安装html-webpack-plugin：<code>yarn add html-webpack-plugin --dev</code>，然后在<code>webpack.config.js</code>文件中添加下面代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line">modules.exports = &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            title: <span class="string">'XinChen UI'</span>,</span><br><span class="line">            template: <span class="string">'index.html'</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样使用命令<code>npx webpack-dev-server</code>，浏览器会启动localhost:8080域名，打开项目目录下的index.html文件，并且这个html文件会自动使用lib目录下的index.tsx文件作为js文件。<br>接下来，在<code>package.json</code>文件内，<code>scripts</code>中添加如下两行代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"start"</span>: <span class="string">"webpack-dev-server"</span>,</span><br><span class="line"><span class="string">"build"</span>: <span class="string">"webpack"</span></span><br></pre></td></tr></table></figure><p>这样我们启动项目是可以使用<code>yarn start</code>命令，打包项目可以使用<code>yarn build</code>命令。</p><h2 id="使用React"><a href="#使用React" class="headerlink" title="使用React"></a>使用React</h2><p>首先安装<code>react</code>和<code>react-dom</code>：<code>yarn add react react-dom</code>，安装完成后，如果直接使用React，会报一个错误提示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">无法找到模块“react”的声明文件。“/Users/xinchen/Public/self_work/XinChen-UI/node_modules/react/index.js”隐式拥有 <span class="string">"any"</span> 类型。</span><br><span class="line">Try <span class="string">`npm install @types/react`</span> <span class="keyword">if</span> it exists or add a <span class="keyword">new</span> declaration (.d.ts) file containing <span class="string">`declare module 'react';`</span>ts(<span class="number">7016</span>)</span><br></pre></td></tr></table></figure><p>错误提示很明显，没有安装<code>@types/react</code>，所以需要继续安装<code>@types/react</code>和<code>@types/react-dom</code>：<code>yarn add @types/react @types/react-dom --dev</code>。在webpack.config.json文件内增加一个配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">modules.exports = &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    resolve: &#123;</span><br><span class="line">        extensions: [<span class="string">'.ts'</span>, <span class="string">'.tsx'</span>, <span class="string">'.js'</span>. <span class="string">'.jsx'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，当我们引入上述四种文件时才能正常引用。<br>在<code>yarn start</code>的时候，会有一个警告，说index.js文件太大，这个需要在<code>webpack.config.json</code>文件中把<code>mode</code>值改为<code>development</code>，这样在开发模式下，不会管index.js是不是太大了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">modules.exports = &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    enternals: &#123;</span><br><span class="line">        react: &#123;</span><br><span class="line">            commonjs: <span class="string">'react'</span>,</span><br><span class="line">            commonjs2: <span class="string">'react'</span>,</span><br><span class="line">            amd: <span class="string">'react'</span>,</span><br><span class="line">            root: <span class="string">'React'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'react-dom'</span>: &#123;</span><br><span class="line">            commonjs: <span class="string">'react-dom'</span>,</span><br><span class="line">            commonjs2: <span class="string">'react-dom'</span>,</span><br><span class="line">            amd: <span class="string">'react-dom'</span>,</span><br><span class="line">            root: <span class="string">'ReactDom'</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再在<code>webpack.config.json</code>文件中加入上述代码，意思就是告诉webpack，<code>enternals</code>内的是外部的库，这样打包的index.js文件就不会包含react的代码。</p><h2 id="配置webpack-config-dev-js和webpack-config-prod-js"><a href="#配置webpack-config-dev-js和webpack-config-prod-js" class="headerlink" title="配置webpack.config.dev.js和webpack.config,prod.js"></a>配置webpack.config.dev.js和webpack.config,prod.js</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        index: <span class="string">'./lib/index.tsx'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'./dist/lib'</span>),</span><br><span class="line">        library: <span class="string">'XinChen UI'</span>,</span><br><span class="line">        libraryTarget: <span class="string">'umd'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    resolve: &#123;</span><br><span class="line">        extensions: [<span class="string">'.ts'</span>, <span class="string">'.tsx'</span>, <span class="string">'.js'</span>, <span class="string">'.jsx'</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.tsx?$/</span>,</span><br><span class="line">                loader: <span class="string">'awesome-typescript-loader'</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.dev.js</span></span><br><span class="line"><span class="keyword">const</span> base = <span class="built_in">require</span>(<span class="string">'./webpack.config'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="built_in">Object</span>.assign(&#123;&#125;, base, &#123;</span><br><span class="line">    mode: <span class="string">'development'</span>,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            title: <span class="string">'XinChen UI'</span>,</span><br><span class="line">            template: <span class="string">'index.html'</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.prod.js</span></span><br><span class="line"><span class="keyword">const</span> base = <span class="built_in">require</span>(<span class="string">'./webpack.config'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="built_in">Object</span>.assign(&#123;&#125;, base, &#123;</span><br><span class="line">    mode: <span class="string">'production'</span>,</span><br><span class="line">    enternals: &#123;</span><br><span class="line">        react: &#123;</span><br><span class="line">            commonjs: <span class="string">'react'</span>,</span><br><span class="line">            commonjs2: <span class="string">'react'</span>,</span><br><span class="line">            amd: <span class="string">'react'</span>,</span><br><span class="line">            root: <span class="string">'React'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'react-dom'</span>: &#123;</span><br><span class="line">            commonjs: <span class="string">'react-dom'</span>,</span><br><span class="line">            commonjs2: <span class="string">'react-dom'</span>,</span><br><span class="line">            amd: <span class="string">'react-dom'</span>,</span><br><span class="line">            root: <span class="string">'ReactDom'</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>三个webpack配置代码如上述所示，<code>webpack.config.js</code>文件是共有的配置，<code>webpack.config.dev.js</code>是开发环境配置，<code>webpack.config.prod.js</code>文件是生产环境配置。<br>同时还需要修改<code>package.json</code>文件如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="string">"start"</span>: <span class="string">"webpack-dev-server --config webpack.config.dev.js"</span>,</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"webpack --config webpack.config.prod.js"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="打包生产-d-ts文件"><a href="#打包生产-d-ts文件" class="headerlink" title="打包生产.d.ts文件"></a>打包生产.d.ts文件</h2><p>在<code>tsconfig.json</code>文件这加入这么一行：<code>&quot;outDir&quot;: &quot;dist&quot;</code>，这样重新打包后，dist目录下就会有<code>index.d.ts</code>和<code>Button.d.ts</code>文件（其实<code>Button.d.ts</code>文件是不需要的），那如何去掉这个文件呢，在这里先挖个坑。</p><h2 id="配置Jest单元测试"><a href="#配置Jest单元测试" class="headerlink" title="配置Jest单元测试"></a>配置Jest单元测试</h2><ol><li><p>运行：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add --dev jest babel-jest @babel/preset-env @babel/preset-react react-test-renderer</span><br></pre></td></tr></table></figure></li><li><p>在根目录下添加<code>.babelrc</code>文件，在文件内添加如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"presets"</span>: [</span><br><span class="line">        <span class="string">"react-app"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在<code>package.json</code>文件内的scripts中添加如下一行代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"test"</span>: <span class="string">"cross-env NODE_ENV=test jest --config=jest.config.js --runInBand"</span></span><br></pre></td></tr></table></figure></li><li><p>添加<code>jest.config.js</code>文件，在文件内添加如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    verbose: <span class="literal">true</span>,</span><br><span class="line">    clearMocks: <span class="literal">false</span>,</span><br><span class="line">    collectCoverage: <span class="literal">false</span>,</span><br><span class="line">    reporters: [<span class="string">"default"</span>],</span><br><span class="line">    moduleFileExtensions: [<span class="string">'js'</span>, <span class="string">'jsx'</span>, <span class="string">'ts'</span>, <span class="string">'tsx'</span>],</span><br><span class="line">    moduleDirectories: [<span class="string">'node_modules'</span>],</span><br><span class="line">    globals: &#123;</span><br><span class="line">      <span class="string">'ts-jest'</span>: &#123;</span><br><span class="line">        tsConfig: <span class="string">'tsconfig.test.json'</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    moduleNameMapper: &#123;</span><br><span class="line">      <span class="string">"\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$"</span>: <span class="string">"&lt;rootDir&gt;/test/__mocks__/file-mock.js"</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    testMatch: [<span class="string">'&lt;rootDir&gt;/**/__tests__/**/*.unit.(js|jsx|ts|tsx)'</span>],</span><br><span class="line">    transform: &#123;</span><br><span class="line">      <span class="string">"^.+unit\\.(js|jsx)$"</span>: <span class="string">"babel-jest"</span>,</span><br><span class="line">      <span class="string">'^.+\\.(ts|tsx)$'</span>: <span class="string">'ts-jest'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    setupFilesAfterEnv: [<span class="string">"&lt;rootDir&gt;test/setupTests.js"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>安装<code>ts-jest</code>：<code>yarn add ts-jest --dev</code>，并且创建test目录，并在这个目录下创建一个<code>setupTests.js</code>文件，目前这个文件暂时是空的。</p></li><li><p>安装<code>@types/jest</code>：<code>yarn add @types/jest --dev</code>;</p></li><li><p>在根目录下创建一个<code>tsconfig.test.json</code>文件，并在该文件下添加如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"extends"</span>: <span class="string">"./tsconfig.json"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;创建目录与远程仓库&quot;&gt;&lt;a href=&quot;#创建目录与远程仓库&quot; class=&quot;headerlink&quot; title=&quot;创建目录与远程仓库&quot;&gt;&lt;/a&gt;创建目录与远程仓库&lt;/h2&gt;&lt;p&gt;在GitHub上新建一个远程仓库，创建时添加readme文件，然后使用&lt;code&gt;git clone&lt;/code&gt;把远程仓库克隆到本地。&lt;/p&gt;
&lt;h2 id=&quot;npm初始化&quot;&gt;&lt;a href=&quot;#npm初始化&quot; class=&quot;headerlink&quot; title=&quot;npm初始化&quot;&gt;&lt;/a&gt;npm初始化&lt;/h2&gt;&lt;p&gt;进入到本地的项目目录，使用&lt;code&gt;npm init -y&lt;/code&gt;命令，在本地新建一个&lt;code&gt;package.json&lt;/code&gt;文件。&lt;/p&gt;
&lt;h2 id=&quot;安装webpack&quot;&gt;&lt;a href=&quot;#安装webpack&quot; class=&quot;headerlink&quot; title=&quot;安装webpack&quot;&gt;&lt;/a&gt;安装webpack&lt;/h2&gt;&lt;p&gt;使用&lt;code&gt;yarn add webpack webpack-cli --dev&lt;/code&gt;命令，&lt;code&gt;dev&lt;/code&gt;的意思就是安装到开发者的依赖里边，也就是在&lt;code&gt;package.json&lt;/code&gt;文件中多了一个&lt;code&gt;devDependenceies&lt;/code&gt;属性。&lt;/p&gt;
    
    </summary>
    
      <category term="TypeScript学习" scheme="http://yoursite.com/categories/TypeScript%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="React" scheme="http://yoursite.com/categories/TypeScript%E5%AD%A6%E4%B9%A0/React/"/>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
      <category term="TypeScript" scheme="http://yoursite.com/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript+React入门</title>
    <link href="http://yoursite.com/2019/06/29/typescript-learning6/"/>
    <id>http://yoursite.com/2019/06/29/typescript-learning6/</id>
    <published>2019-06-29T14:48:17.224Z</published>
    <updated>2019-07-06T14:22:19.008Z</updated>
    
    <content type="html"><![CDATA[<h2 id="项目构建"><a href="#项目构建" class="headerlink" title="项目构建"></a>项目构建</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npx create-react-app my-app --typescript</span><br><span class="line"></span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"></span><br><span class="line">yarn create react-app my-app --typescript</span><br></pre></td></tr></table></figure><p>安装完成后，<code>cd my-app</code>，然后<code>yarn start</code>，这样项目就正式启动了。</p><h2 id="工程目录结构不同点"><a href="#工程目录结构不同点" class="headerlink" title="工程目录结构不同点"></a>工程目录结构不同点</h2><ol><li>入口文件还是index文件，不过由之前的<code>index.jsx</code>变成了<code>index.tsx</code>；</li><li>所有的组件之前是<code>.jsx</code>文件，现在都是<code>.tsx</code>文件；</li></ol><a id="more"></a><h2 id="简单写一个按钮组件"><a href="#简单写一个按钮组件" class="headerlink" title="简单写一个按钮组件"></a>简单写一个按钮组件</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Button.tsx</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./Button.css'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Button <span class="keyword">extends</span> React.Component &#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div className=<span class="string">"btn"</span>&gt;&#123;<span class="keyword">this</span>.props.children&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Button;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/* Button.css */</span></span><br><span class="line"><span class="selector-class">.btn</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// App.tsx</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> Button <span class="keyword">from</span> <span class="string">'./Button'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App: React.FC = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">"App"</span>&gt;</span><br><span class="line">      &lt;Button&gt;Click&lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><h4 id="接收props"><a href="#接收props" class="headerlink" title="接收props"></a>接收props</h4><p>如果此时在<code>Button</code>组件上传一个值：<code>&lt;Button size=&quot;big&quot;&gt;Click&lt;/Button&gt;</code>，此时还未编译就会报错，报错提示：<strong>不能将类型“{ children: string; size: string; }”分配给类型“IntrinsicAttributes…</strong>，其实意思就是<code>Button</code>组件没有定义接收<code>size</code>属性。<br>为了解决这个报错，那就要在<code>Button</code>组件内定义<code>size</code>属性，有下面几种方式：</p><ol><li><code>class Button extends React.Component&lt;{size: string}&gt;...</code>，直接在<code>React.Component</code>后面加一个泛型，只是这种方式在有多个属性时就会写得很乱，不推荐；</li><li><code>type Props = {size: string;}</code> <code>class Button extends React.Component&lt;Props&gt;</code>，用<code>type</code>关键字声明一个类型别名；</li><li><code>interface Props = {size: string;}</code> <code>class Button extends React.Component&lt;Props&gt;</code>，直接定义一个接口，普遍用这种方式；</li></ol><h4 id="constructor构造函数传参"><a href="#constructor构造函数传参" class="headerlink" title="constructor构造函数传参"></a>constructor构造函数传参</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./Button.css'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> IProps &#123;</span><br><span class="line">    size: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Button <span class="keyword">extends</span> React.Component&lt;IProps&gt; &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">props</span>) &#123;  <span class="comment">//报错，参数“props”隐式具有“any”类型。</span></span><br><span class="line">        <span class="keyword">super</span>(props)</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div className=<span class="string">"btn"</span>&gt;&#123;<span class="keyword">this</span>.props.children&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Button;</span></span><br></pre></td></tr></table></figure><p>上述代码，<code>constructor</code>构造器中直接传入<code>props</code>参数会报错， 必须定义<code>props</code>参数是上述定义的<code>IProps</code>接口类型<code>constructor(props: IProps)</code>。</p><h4 id="定义state内部属性类型"><a href="#定义state内部属性类型" class="headerlink" title="定义state内部属性类型"></a>定义state内部属性类型</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./Button.css'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> IProps &#123;</span><br><span class="line">    size: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Button <span class="keyword">extends</span> React.Component&lt;IProps&gt; &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">props: IProps</span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            n: <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div className=<span class="string">"btn"</span>&gt;&#123;<span class="keyword">this</span>.props.children&#125;&#123;<span class="keyword">this</span>.state.n&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        );  /</span><span class="regexp">/ 报错，类型“Readonly&lt;&#123;&#125;&gt;”上不存在属性“n”。</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Button;</span></span><br></pre></td></tr></table></figure><p>上述代码这样直接写<code>state</code>，在下面代码使用时会报错，根据报错信息，其实意思就是没有定义<code>n</code>是什么类型，所以需要事先定义好<code>n</code>的类型，增加如下代码：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> IState &#123;</span><br><span class="line">    n: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> Button <span class="keyword">extends</span> React.Component&lt;IProps, IState&gt; &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">props: IProps</span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            n: <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div className=<span class="string">"btn"</span>&gt;&#123;<span class="keyword">this</span>.props.children&#125;&#123;<span class="keyword">this</span>.state.n&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="使用函数回调"><a href="#使用函数回调" class="headerlink" title="使用函数回调"></a>使用函数回调</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// App.tsx</span></span><br><span class="line"><span class="keyword">class</span> App <span class="keyword">extends</span> React.Component &#123;</span><br><span class="line">  click(e: React.MouseEvent) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'click'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(e)</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"App"</span>&gt;</span><br><span class="line">        &lt;Button size=<span class="string">"big"</span> onClick=&#123;<span class="keyword">this</span>.click&#125;&gt;Click&lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Button.tsx</span></span><br><span class="line"><span class="keyword">interface</span> IProps &#123;</span><br><span class="line">    size: <span class="built_in">string</span>;</span><br><span class="line">    onClick: React.MouseEventHandler;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> IState &#123;</span><br><span class="line">    n: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Button <span class="keyword">extends</span> React.Component&lt;IProps, IState&gt; &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">props: IProps</span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            n: <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div className=<span class="string">"btn"</span> onClick=&#123;<span class="keyword">this</span>.props.onClick&#125;&gt;&#123;<span class="keyword">this</span>.props.children&#125;&#123;<span class="keyword">this</span>.state.n&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>如上述代码，<code>Button</code>组件中需要定义函数类型，由于是一个鼠标事件，定义为<code>React.MouseEventHandler</code>；在App文件中，在函数中使用<code>e</code>这个参数，也需要定义类型为<code>React.MouseEvent</code>。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;项目构建&quot;&gt;&lt;a href=&quot;#项目构建&quot; class=&quot;headerlink&quot; title=&quot;项目构建&quot;&gt;&lt;/a&gt;项目构建&lt;/h2&gt;&lt;figure class=&quot;highlight ts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npx create-react-app my-app --typescript&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// or&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yarn create react-app my-app --typescript&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;安装完成后，&lt;code&gt;cd my-app&lt;/code&gt;，然后&lt;code&gt;yarn start&lt;/code&gt;，这样项目就正式启动了。&lt;/p&gt;
&lt;h2 id=&quot;工程目录结构不同点&quot;&gt;&lt;a href=&quot;#工程目录结构不同点&quot; class=&quot;headerlink&quot; title=&quot;工程目录结构不同点&quot;&gt;&lt;/a&gt;工程目录结构不同点&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;入口文件还是index文件，不过由之前的&lt;code&gt;index.jsx&lt;/code&gt;变成了&lt;code&gt;index.tsx&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;所有的组件之前是&lt;code&gt;.jsx&lt;/code&gt;文件，现在都是&lt;code&gt;.tsx&lt;/code&gt;文件；&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="TypeScript学习" scheme="http://yoursite.com/categories/TypeScript%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="TypeScript" scheme="http://yoursite.com/tags/TypeScript/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript+Vue入门</title>
    <link href="http://yoursite.com/2019/06/26/typescript-learning5/"/>
    <id>http://yoursite.com/2019/06/26/typescript-learning5/</id>
    <published>2019-06-26T07:36:35.000Z</published>
    <updated>2019-07-01T09:07:26.656Z</updated>
    
    <content type="html"><![CDATA[<h2 id="工程创建"><a href="#工程创建" class="headerlink" title="工程创建"></a>工程创建</h2><ol><li>如果没有安装Vue cli，需要先安装：<code>npm install --global @vue/cli</code>;</li><li>创建一个新工程，如果已经在自己手动创建好的目录下：<code>vue create .</code>，如果没有手动创建目录：<code>vue create my-project-name</code>;</li><li>工程构建时，提示<code>Check the features needed for your project</code>时，选择了<code>Babel、TypeScript、CSS Pre-processors</code>;</li><li>提示<code>Use class-style component syntax?</code>时，选择yes；<a id="more"></a><h2 id="工程目录部分结构不同点"><a href="#工程目录部分结构不同点" class="headerlink" title="工程目录部分结构不同点"></a>工程目录部分结构不同点</h2>src目录下，有三个<code>.ts</code>文件<code>main.ts</code> <code>shims-tsx.d.ts</code> <code>shims-vue.d.ts</code>，<code>main.ts</code>依然是入口文件，<code>shims-tsx.d.ts</code>文件主要方便在ts中使用jsx语法，<code>shims-tsx.d.ts</code>文件用于ts识别<code>.vue</code>文件；</li></ol><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;input v-model=<span class="string">"msg"</span>&gt;</span><br><span class="line">    &lt;p&gt;prop: &#123;&#123;propMessage&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;msg: &#123;&#123;msg&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;helloMsg: &#123;&#123;helloMsg&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;computed msg: &#123;&#123;computedMsg&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;button @click="greet"&gt;Greet&lt;/button&gt;</span><br><span class="line">    &lt;HelloWorld msg=<span class="string">"Welcome to Your Vue.js + TypeScript App"</span>/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; Component, Vue &#125; from <span class="string">'vue-property-decorator'</span>;</span><br><span class="line"><span class="keyword">import</span> HelloWorld from <span class="string">'./components/HelloWorld.vue'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    propMessage: String</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    HelloWorld,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">export <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Vue</span> </span>&#123;</span><br><span class="line">  <span class="comment">// initial data</span></span><br><span class="line">  msg = <span class="number">123</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// use prop values for initial data</span></span><br><span class="line">  helloMsg = <span class="string">'Hello, '</span> + <span class="keyword">this</span>.propMessage</span><br><span class="line"></span><br><span class="line">  <span class="comment">// lifecycle hook</span></span><br><span class="line">  mounted () &#123;</span><br><span class="line">    <span class="keyword">this</span>.greet()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// computed</span></span><br><span class="line">  <span class="function">get <span class="title">computedMsg</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'computed '</span> + <span class="keyword">this</span>.msg</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// method</span></span><br><span class="line">  greet () &#123;</span><br><span class="line">    alert(<span class="string">'greeting: '</span> + <span class="keyword">this</span>.msg)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ol><li><code>Component</code>和<code>Vue</code>从<code>vue-property-decorator</code>引入；</li><li><code>props</code>和<code>components</code>都放在<code>@Component</code>里边声明；</li><li>初始数据直接使用<code>msg = 123</code>的形式；</li><li>方法、钩子函数等都放在类似上述代码<code>App</code>对象内；</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;工程创建&quot;&gt;&lt;a href=&quot;#工程创建&quot; class=&quot;headerlink&quot; title=&quot;工程创建&quot;&gt;&lt;/a&gt;工程创建&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;如果没有安装Vue cli，需要先安装：&lt;code&gt;npm install --global @vue/cli&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;创建一个新工程，如果已经在自己手动创建好的目录下：&lt;code&gt;vue create .&lt;/code&gt;，如果没有手动创建目录：&lt;code&gt;vue create my-project-name&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;工程构建时，提示&lt;code&gt;Check the features needed for your project&lt;/code&gt;时，选择了&lt;code&gt;Babel、TypeScript、CSS Pre-processors&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;提示&lt;code&gt;Use class-style component syntax?&lt;/code&gt;时，选择yes；
    
    </summary>
    
      <category term="TypeScript学习" scheme="http://yoursite.com/categories/TypeScript%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="TypeScript" scheme="http://yoursite.com/tags/TypeScript/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript-泛型</title>
    <link href="http://yoursite.com/2019/06/20/typescript-learning4/"/>
    <id>http://yoursite.com/2019/06/20/typescript-learning4/</id>
    <published>2019-06-20T15:18:18.000Z</published>
    <updated>2019-06-26T07:39:49.780Z</updated>
    
    <content type="html"><![CDATA[<h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><h2 id="泛型的使用"><a href="#泛型的使用" class="headerlink" title="泛型的使用"></a>泛型的使用</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">returnIt</span>&lt;<span class="title">T</span>&gt;(<span class="params">sth: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sth;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s = returnIt&lt;<span class="built_in">string</span>&gt;(<span class="string">'hi'</span>);</span><br><span class="line"><span class="keyword">let</span> s2 = returnIt&lt;<span class="built_in">number</span>&gt;(<span class="string">'hello'</span>) <span class="comment">// 报错了</span></span><br></pre></td></tr></table></figure><p><strong>泛型</strong>就是用一个东西表示广泛的类型，由如上述代码，在函数变量名<code>returnIt</code>后面加<code>&lt;T&gt;</code>，然后函数参数指定<code>T</code>类型，函数返回也是<code>T</code>类型，<strong>并且这个<code>T</code>可以写任意字母</strong>。<code>returnIt&lt;number&gt;(&#39;hello&#39;)</code>会报错，因为<code>&#39;hello&#39;</code>是<code>string</code>类型，但是函数调用时说明了接受<code>number</code>类型参数。</p><a id="more"></a><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">returnIt</span>&lt;<span class="title">T</span>&gt;(<span class="params">sth: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sth;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">interface</span> Human &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s = returnIt&lt;Human&gt;(&#123;name: <span class="string">'jack'</span>, age: <span class="number">18</span>&#125;)</span><br><span class="line"><span class="keyword">let</span> s1 = returnIt(&#123;name: <span class="string">'jack'</span>, age: <span class="number">18</span>&#125;)</span><br><span class="line"><span class="keyword">let</span> s2 = returnIt&lt;Human&gt;(&#123;name: <span class="string">'jack'</span>&#125;)  <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><p>泛型和接口一起使用，由如上述代码，<code>s</code> <code>s1</code>都可以，<code>s2</code>会报错，因为传入函数的参数不符合接口的定义。</p><h2 id="使用泛型变量"><a href="#使用泛型变量" class="headerlink" title="使用泛型变量"></a>使用泛型变量</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">returnArray</span>&lt;<span class="title">T</span>&gt;(<span class="params">array: T[]</span>): <span class="title">T</span>[] </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s = returnArray([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);</span><br><span class="line"><span class="keyword">let</span> s1 = returnArray(<span class="string">'hi'</span>); <span class="comment">// 报错，因为'hi'不是一个数组</span></span><br></pre></td></tr></table></figure><p>使用泛型类型，可以说明函数参数是一个广泛类型的数组（不关心这个数组内部是什么类型）。</p><h2 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> GenericNumber&lt;T&gt; &#123;</span><br><span class="line">    zeroValue: T;</span><br><span class="line">    add: <span class="function">(<span class="params">x: T, y: T</span>) =&gt;</span> T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myGenericNumber = <span class="keyword">new</span> GenericNumber&lt;<span class="built_in">number</span>&gt;();</span><br><span class="line">myGenericNumber.zeroValue = <span class="number">0</span>;</span><br><span class="line">myGenericNumber.add = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123; <span class="keyword">return</span> x + y; &#125;;</span><br></pre></td></tr></table></figure><p>这个是官方文档的一个例子，当<code>myGenericNumber</code>实例化时，<code>myGenericNumber</code>内就有一个<code>number</code>类型的<code>zeroValue</code>属性，还有一个<code>add</code>方法，这个方法接收两个都是<code>number</code>类型的参数，返回值也是<code>number</code>类型。</p><h2 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">returnIt</span>&lt;<span class="title">T</span>&gt;(<span class="params">sth: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(sth.length);  <span class="comment">// 报错，sth没有length属性</span></span><br><span class="line">    <span class="keyword">return</span> sth;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> s = returnIt&lt;<span class="built_in">string</span>&gt;(<span class="string">'hi'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="keyword">interface</span> hasLength &#123;</span><br><span class="line">    length: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">returnIt</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">hasLength</span>&gt;(<span class="params">sth: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(sth.length);</span><br><span class="line">    <span class="keyword">return</span> sth;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s = returnIt&lt;<span class="built_in">string</span>&gt;(<span class="string">'hi'</span>);</span><br></pre></td></tr></table></figure><p>上述代码第一种情况下，泛型T并没有<code>length</code>属性，所以当访问<code>length</code>属性时，自然会报错，这就是对泛型的约束。第二种情况下，定义了一个具有<code>length</code>属性的接口，并且泛型T继承与接口<code>hasLength</code>，这样就不会报错了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;泛型&quot;&gt;&lt;a href=&quot;#泛型&quot; class=&quot;headerlink&quot; title=&quot;泛型&quot;&gt;&lt;/a&gt;泛型&lt;/h1&gt;&lt;h2 id=&quot;泛型的使用&quot;&gt;&lt;a href=&quot;#泛型的使用&quot; class=&quot;headerlink&quot; title=&quot;泛型的使用&quot;&gt;&lt;/a&gt;泛型的使用&lt;/h2&gt;&lt;figure class=&quot;highlight ts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;returnIt&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;T&lt;/span&gt;&amp;gt;(&lt;span class=&quot;params&quot;&gt;sth: T&lt;/span&gt;): &lt;span class=&quot;title&quot;&gt;T&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; sth;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; s = returnIt&amp;lt;&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;&amp;gt;(&lt;span class=&quot;string&quot;&gt;&#39;hi&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; s2 = returnIt&amp;lt;&lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;&amp;gt;(&lt;span class=&quot;string&quot;&gt;&#39;hello&#39;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 报错了&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;泛型&lt;/strong&gt;就是用一个东西表示广泛的类型，由如上述代码，在函数变量名&lt;code&gt;returnIt&lt;/code&gt;后面加&lt;code&gt;&amp;lt;T&amp;gt;&lt;/code&gt;，然后函数参数指定&lt;code&gt;T&lt;/code&gt;类型，函数返回也是&lt;code&gt;T&lt;/code&gt;类型，&lt;strong&gt;并且这个&lt;code&gt;T&lt;/code&gt;可以写任意字母&lt;/strong&gt;。&lt;code&gt;returnIt&amp;lt;number&amp;gt;(&amp;#39;hello&amp;#39;)&lt;/code&gt;会报错，因为&lt;code&gt;&amp;#39;hello&amp;#39;&lt;/code&gt;是&lt;code&gt;string&lt;/code&gt;类型，但是函数调用时说明了接受&lt;code&gt;number&lt;/code&gt;类型参数。&lt;/p&gt;
    
    </summary>
    
      <category term="TypeScript学习" scheme="http://yoursite.com/categories/TypeScript%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="TypeScript" scheme="http://yoursite.com/tags/TypeScript/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript-函数</title>
    <link href="http://yoursite.com/2019/06/20/typescript-learning3/"/>
    <id>http://yoursite.com/2019/06/20/typescript-learning3/</id>
    <published>2019-06-20T09:14:01.000Z</published>
    <updated>2019-06-25T02:53:01.900Z</updated>
    
    <content type="html"><![CDATA[<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>函数其实也是对象，只是是一个特殊的对象，是<strong>可以被调用（call）的对象</strong>。</p><h2 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ley add2 = <span class="function"><span class="keyword">function</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>给每个参数添加类型之后再为函数本身添加返回值的类型，ts可以根据返回语句自动推断出返回值类型，如果实际返回值不是规定的类型就会报错。</p><a id="more"></a><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> add2: <span class="function">(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span> = <span class="function"><span class="keyword">function</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码是表示<strong>完整函数类型</strong>，其实有两部分，等于号前面和后面两部分；等于号前面部分，意思就是给<code>add2</code>函数定义了一个函数类型，是一个接收两个<code>number</code>类型的参数并且返回值是<code>number</code>类型的函数类型；等于号后面就是一个匿名函数，这个函数也是符合前面定义的函数类型的函数。上述代码中，<code>let add2: (x: number, y: number) =&gt; number</code>其实是这样的：<code>let add2: ((x: number, y: number) =&gt; number)</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> add2: <span class="function">(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span> = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>): </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果在赋值语句的一边指定了类型，但是另一边没有类型的话，ta编译器会自动识别出类型。</p><h2 id="可选参数和默认参数"><a href="#可选参数和默认参数" class="headerlink" title="可选参数和默认参数"></a>可选参数和默认参数</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildName</span>(<span class="params">firstName: <span class="built_in">string</span>, lastName?: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (lastName) &#123;</span><br><span class="line">        <span class="keyword">return</span> firstName + <span class="string">" "</span> + lastName;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> firstName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> res1 = buildName(<span class="string">'Bob'</span>);</span><br><span class="line"><span class="keyword">let</span> res2 = buildName(<span class="string">'Bob'</span>, <span class="string">'Adams'</span>);</span><br></pre></td></tr></table></figure><p>对于可选参数，可以在参数后面加一个问号，如上述代码<code>lastName?: string</code>。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildName</span>(<span class="params">firstName: <span class="built_in">string</span>, lastName='Smith'</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> firstName + <span class="string">" "</span> + lastName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> res1 = buildName(<span class="string">'Bob'</span>);  <span class="comment">// Bob Smith</span></span><br><span class="line"><span class="keyword">let</span> res2 = buildName(<span class="string">'Bob'</span>, <span class="string">'Adams'</span>);  <span class="comment">// Bob Adams</span></span><br><span class="line"><span class="keyword">let</span> res3 = buildName(<span class="string">'Bob'</span>, <span class="literal">undefined</span>)  <span class="comment">// Bob Smith</span></span><br></pre></td></tr></table></figure><p>在ts里，可以为参数提供一个默认值（当用户没有传值或者传了undefined）。</p><h2 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildName</span>(<span class="params">firstName: <span class="built_in">string</span>, ...restOfName: <span class="built_in">string</span>[]</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> firstName + <span class="string">' '</span> + restOfName.jion(<span class="string">' '</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fullName = buildName(<span class="string">"Joseph"</span>, <span class="string">"Samuel"</span>, <span class="string">"Lucas"</span>, <span class="string">"MacKinzie"</span>);</span><br></pre></td></tr></table></figure><p>剩余参数会被当做个数不限的可选参数，可以一个都没有，同样也可以有任意个；在参数前加<code>...</code>，表示一个数组，冒号后面可以定义是个<code>string</code>类型数组还是<code>number</code>类型数组或其他类型数组；在函数体内可以使用这个数组。</p><h2 id="this和箭头函数"><a href="#this和箭头函数" class="headerlink" title="this和箭头函数"></a>this和箭头函数</h2><p>this的值在函数被调用的时候才确定，也就是说，<strong>this值其实是这个函数的参数，只有调用这个函数时才知道this的值是什么</strong>；在TS里，this本质还是和JS里的this一样，不过在TS里，可以事先给this指定类型，或指定必须符合哪个接口或是哪个类：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Human &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"><span class="keyword">this</span>: Human</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn.call(&#123;name: <span class="string">'jack'</span>, age: <span class="number">18</span>&#125;);  <span class="comment">// pass</span></span><br><span class="line">fn();  <span class="comment">// error</span></span><br></pre></td></tr></table></figure><h2 id="函数的重载"><a href="#函数的重载" class="headerlink" title="函数的重载"></a>函数的重载</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">n1: <span class="built_in">number</span>, n2: <span class="built_in">number</span></span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">n1: <span class="built_in">string</span>, n2: <span class="built_in">string</span></span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">n1, n2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n1 + n2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>, <span class="number">2</span>);  <span class="comment">// pass  =&gt; 3</span></span><br><span class="line">add(<span class="string">'a'</span>, <span class="string">'b'</span>)  <span class="comment">// pass  =&gt; 'ab'</span></span><br><span class="line">add(<span class="number">1</span>, <span class="string">'2'</span>)  <span class="comment">// error 两个参数不符合同时是string类型或者number类型</span></span><br></pre></td></tr></table></figure><p>上述代码中，第一行和第二行表示对函数参数类型的定义，可以同时是<code>number``，或者同时是</code>string`，第三行开始的函数就是表示函数功能的具体实现。</p><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><h4 id="类型推断"><a href="#类型推断" class="headerlink" title="类型推断"></a>类型推断</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">n1: <span class="built_in">string</span>, n2: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n1 + n2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s = add(<span class="string">'a'</span> + <span class="string">'b'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(s.split(<span class="string">''</span>));  <span class="comment">// pass</span></span><br></pre></td></tr></table></figure><p>add函数在声明时并不需要声明返回值时什么类型，因为TS自己会推断函数的返回值是什么类型，所以当<code>s.split(&#39;&#39;)</code>时不会报错。</p><h4 id="类型兼容"><a href="#类型兼容" class="headerlink" title="类型兼容"></a>类型兼容</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Human &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> human1: Human = &#123;name: <span class="string">'jack'</span>, age: <span class="number">18</span>, gender: <span class="string">'male'</span>&#125;; <span class="comment">//报错，因为对象不符合接口Human的定义，多了gender属性</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x = &#123;name: <span class="string">'jack'</span>, age: <span class="number">18</span>, gender: <span class="string">'male'</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> human2: Human = x;  <span class="comment">//这里不会报错，pass</span></span><br></pre></td></tr></table></figure><p>至于这样设计的目的，应该是可以让我们少些一些代码，节约类型的个数。</p><h4 id="Unsound"><a href="#Unsound" class="headerlink" title="Unsound"></a>Unsound</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> EventType &#123; Mouse, Keyboard &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Event &#123; timestamp: <span class="built_in">number</span>; &#125;</span><br><span class="line"><span class="keyword">interface</span> MouseEvent <span class="keyword">extends</span> Event &#123; x: <span class="built_in">number</span>; y: <span class="built_in">number</span> &#125;</span><br><span class="line"><span class="keyword">interface</span> KeyEvent <span class="keyword">extends</span> Event &#123; keyCode: <span class="built_in">number</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">listenEvent</span>(<span class="params">eventType: EventType, handler: (n: Event) =&gt; <span class="built_in">void</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Unsound, but useful and common</span></span><br><span class="line">listenEvent(EventType.Mouse, <span class="function">(<span class="params">e: MouseEvent</span>) =&gt;</span> <span class="built_in">console</span>.log(e.x + <span class="string">','</span> + e.y));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Undesirable alternatives in presence of soundness</span></span><br><span class="line">listenEvent(EventType.Mouse, <span class="function">(<span class="params">e: Event</span>) =&gt;</span> <span class="built_in">console</span>.log((&lt;MouseEvent&gt;e).x + <span class="string">','</span> + (&lt;MouseEvent&gt;e).y));</span><br><span class="line">listenEvent(EventType.Mouse, &lt;<span class="function">(<span class="params">e: Event</span>) =&gt;</span> <span class="built_in">void</span>&gt;<span class="function">(<span class="params">(<span class="params">e: MouseEvent</span>) =&gt; <span class="built_in">console</span>.log(<span class="params">e.x + ',' + e.y</span>)</span>));</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">// <span class="params">Still</span> <span class="params">disallowed</span> (<span class="params">clear error</span>). <span class="params">Type</span> <span class="params">safety</span> <span class="params">enforced</span> <span class="params">for</span> <span class="params">wholly</span> <span class="params">incompatible</span> <span class="params">types</span></span></span><br><span class="line"><span class="function"><span class="params">listenEvent</span>(<span class="params">EventType.Mouse, (<span class="params">e: <span class="built_in">number</span></span>) =&gt; <span class="built_in">console</span>.log(<span class="params">e</span>)</span>);  // 报错</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h1&gt;&lt;p&gt;函数其实也是对象，只是是一个特殊的对象，是&lt;strong&gt;可以被调用（call）的对象&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;函数类型&quot;&gt;&lt;a href=&quot;#函数类型&quot; class=&quot;headerlink&quot; title=&quot;函数类型&quot;&gt;&lt;/a&gt;函数类型&lt;/h2&gt;&lt;figure class=&quot;highlight ts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x: &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;, y: &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;&lt;/span&gt;): &lt;span class=&quot;title&quot;&gt;number&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x + y;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ley add2 = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x: &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;, y: &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;&lt;/span&gt;): &lt;span class=&quot;title&quot;&gt;number&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x + y;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;给每个参数添加类型之后再为函数本身添加返回值的类型，ts可以根据返回语句自动推断出返回值类型，如果实际返回值不是规定的类型就会报错。&lt;/p&gt;
    
    </summary>
    
      <category term="TypeScript学习" scheme="http://yoursite.com/categories/TypeScript%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="TypeScript" scheme="http://yoursite.com/tags/TypeScript/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript-类</title>
    <link href="http://yoursite.com/2019/06/19/typescript-learning2/"/>
    <id>http://yoursite.com/2019/06/19/typescript-learning2/</id>
    <published>2019-06-19T14:58:05.000Z</published>
    <updated>2019-06-20T09:14:57.700Z</updated>
    
    <content type="html"><![CDATA[<h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><h2 id="类的声明"><a href="#类的声明" class="headerlink" title="类的声明"></a>类的声明</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Human &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;;</span><br><span class="line">    move() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'可以行走...'</span>)</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jack = <span class="keyword">new</span> Human(<span class="string">'jack'</span>, <span class="number">18</span>)  <span class="comment">// jack ==&gt; &#123;'jack', 18&#125;</span></span><br></pre></td></tr></table></figure><p>类的声明用<code>class</code>修饰符，内部可以使用构造器<code>constructor</code>，构造器<code>constructor</code>是一个函数，可以让我们用<code>new ...</code>来实例化一个对象，并且<code>constructor</code>的参数可以设置默认值；<code>Human</code>类内部可以定义方法，类似上述<code>move</code>函数。</p><a id="more"></a><h2 id="类的静态属性"><a href="#类的静态属性" class="headerlink" title="类的静态属性"></a>类的静态属性</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Human &#123;</span><br><span class="line">    <span class="keyword">static</span> a = <span class="number">1</span>;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jack = <span class="keyword">new</span> Human(<span class="string">'jack'</span>, <span class="number">18</span>)</span><br></pre></td></tr></table></figure><p>类的静态属性用<code>static</code>修饰符，每个实例想要访问这个属性的时候，都要类似于<code>jack.a</code>来访问。</p><h2 id="类的私有属性"><a href="#类的私有属性" class="headerlink" title="类的私有属性"></a>类的私有属性</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Human &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">    <span class="keyword">private</span> secret: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.secret = <span class="string">'这是我的秘密'</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jack = <span class="keyword">new</span> Human(<span class="string">'jack'</span>, <span class="number">18</span>)</span><br><span class="line"><span class="built_in">console</span>.log(jack.secret)  <span class="comment">// ==&gt; 报错</span></span><br></pre></td></tr></table></figure><p>类的私有属性使用<code>private</code>修饰符，<code>jack</code>访问<code>secret</code>属性时会报错，<code>secret</code>属性只能在<code>Human</code>类种使用。这里增加一点说明，<code>name</code>和<code>age</code>属性默认是<code>public</code>，其实是这样：<code>public name: string;</code> <code>public age: number;</code>。</p><h2 id="readonly修饰符"><a href="#readonly修饰符" class="headerlink" title="readonly修饰符"></a>readonly修饰符</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Human &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    readonly age: <span class="built_in">number</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jack = <span class="keyword">new</span> Human(<span class="string">'jack'</span>, <span class="number">18</span>)</span><br><span class="line">jack.age = <span class="number">8</span>  <span class="comment">// 报错，age是只读的</span></span><br></pre></td></tr></table></figure><p>用<code>readonly</code>关键字将属性设置为只读，只读属性必须在声明时或这早函数里被初始化。</p><h2 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">    <span class="keyword">type</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"><span class="keyword">type</span>: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.type = <span class="keyword">type</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    move(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> Human <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">'哺乳动物'</span>);</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jack = <span class="keyword">new</span> Human(<span class="string">'jack'</span>, <span class="number">18</span>)  <span class="comment">// jack ==&gt; &#123;'jack', 18&#125;</span></span><br></pre></td></tr></table></figure><p>类的继承也是用修饰符<code>extends</code>来实现，<strong>并且</strong>，<code>Human</code>继承<code>Animal</code>，在<code>Human</code>的<code>constructor</code>内需要调用<code>super()</code>；上述代码中，<code>super(&#39;哺乳动物&#39;)</code>相当于调用了<code>Animal</code>种的<code>constructor()</code>，这样<code>jack</code>就有了<code>type</code>属性，并且<code>jack.type === &#39;哺乳动物&#39;</code>。</p><h2 id="理解protected"><a href="#理解protected" class="headerlink" title="理解protected"></a>理解protected</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">    <span class="keyword">type</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">protected</span> hand: <span class="built_in">boolean</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"><span class="keyword">type</span>: <span class="built_in">string</span>, hand: <span class="built_in">boolean</span></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.type = <span class="keyword">type</span>;</span><br><span class="line">        <span class="keyword">this</span>.hand = hand</span><br><span class="line">    &#125;;</span><br><span class="line">    move(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> Human <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">'哺乳动物'</span>, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jack = <span class="keyword">new</span> Human(<span class="string">'jack'</span>, <span class="number">18</span>)</span><br><span class="line"><span class="built_in">console</span>.log(jack.hand)  <span class="comment">// ==&gt; 报错</span></span><br></pre></td></tr></table></figure><p><code>protected</code>修饰符雨<code>private</code>类似，但有一点不同，<code>protected</code>成员在它的子类仍然可以使用，而<code>private</code>就不可以。</p><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p>抽象类也可以叫做“爸爸类”：专门当作别的类的爸爸的类；也可以叫做“没有写完的类”：只描述有什么方法，并没有完全实现这些方法。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> Animal &#123;</span><br><span class="line">    <span class="keyword">abstract</span> makeNoice(): <span class="built_in">void</span> &#123;&#125;;</span><br><span class="line">    move(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> animal = <span class="keyword">new</span> Animal() <span class="comment">// 报错，因为Animal是抽象类，makeNoice方法并没有写完</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Human <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;;</span><br><span class="line">    makeNoice(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'说普通话'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jack = <span class="keyword">new</span> Human(<span class="string">'jack'</span>, <span class="number">18</span>)</span><br></pre></td></tr></table></figure><ol><li>抽象类要在声明时前面加<code>abstract</code>修饰符；</li><li>抽象类内部有一个方法，这个方法并不能在当时写全，那这个方法前面加一个<code>abstract</code>修饰符；</li><li>由如上述代码中，<code>new Animal()</code>实例化会报错，因为内部有方法并没有写全；</li><li>父类中如果有未写完的方法，那子类（非抽象类）中需要写完它；</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;类&quot;&gt;&lt;a href=&quot;#类&quot; class=&quot;headerlink&quot; title=&quot;类&quot;&gt;&lt;/a&gt;类&lt;/h1&gt;&lt;h2 id=&quot;类的声明&quot;&gt;&lt;a href=&quot;#类的声明&quot; class=&quot;headerlink&quot; title=&quot;类的声明&quot;&gt;&lt;/a&gt;类的声明&lt;/h2&gt;&lt;figure class=&quot;highlight ts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; Human &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name: &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    age: &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name: &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;, age: &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age = age;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    move() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;可以行走...&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; jack = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Human(&lt;span class=&quot;string&quot;&gt;&#39;jack&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;)  &lt;span class=&quot;comment&quot;&gt;// jack ==&amp;gt; &amp;#123;&#39;jack&#39;, 18&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;类的声明用&lt;code&gt;class&lt;/code&gt;修饰符，内部可以使用构造器&lt;code&gt;constructor&lt;/code&gt;，构造器&lt;code&gt;constructor&lt;/code&gt;是一个函数，可以让我们用&lt;code&gt;new ...&lt;/code&gt;来实例化一个对象，并且&lt;code&gt;constructor&lt;/code&gt;的参数可以设置默认值；&lt;code&gt;Human&lt;/code&gt;类内部可以定义方法，类似上述&lt;code&gt;move&lt;/code&gt;函数。&lt;/p&gt;
    
    </summary>
    
      <category term="TypeScript学习" scheme="http://yoursite.com/categories/TypeScript%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="TypeScript" scheme="http://yoursite.com/tags/TypeScript/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript基础</title>
    <link href="http://yoursite.com/2019/06/14/typescript-learning1/"/>
    <id>http://yoursite.com/2019/06/14/typescript-learning1/</id>
    <published>2019-06-14T03:04:52.000Z</published>
    <updated>2019-06-19T14:53:37.178Z</updated>
    
    <content type="html"><![CDATA[<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul><li>JS七种数据类型（number、string、undefined、null、object、boolean、symbol）</li><li>any<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> n1:<span class="built_in">number</span> = <span class="number">1</span></span><br><span class="line">n1 = <span class="string">'1'</span>  <span class="comment">// error</span></span><br><span class="line"><span class="keyword">let</span> n2:<span class="built_in">any</span> = <span class="number">2</span></span><br><span class="line">n2 = <span class="string">'2'</span>  <span class="comment">// pass</span></span><br></pre></td></tr></table></figure></li></ul><p>如果一个变量在赋值时声明了是<code>number</code>，后面如果把不是<code>number</code>的数据赋值给<strong>n1</strong>，那就会<strong>报错</strong>；如果一个变量在赋值时声明的时<code>any</code>，后面可以把任何类型的数据赋值给<strong>n2</strong></p><a id="more"></a><ul><li>枚举(enum)<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Gender &#123; Man, Woman &#125;</span><br><span class="line"><span class="keyword">let</span> jack:Gender = Gender.Man</span><br><span class="line"><span class="built_in">console</span>.log(jack)  <span class="comment">// =&gt; 0</span></span><br><span class="line">jack = Gender.Woman</span><br><span class="line"><span class="built_in">console</span>.log(jack)  <span class="comment">// =&gt; 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> Gender1 = &#123; Man=<span class="string">'man'</span>, Woman=<span class="string">'woman'</span> &#125;</span><br><span class="line"><span class="keyword">let</span> jack:Gender1 = Gender1.Man</span><br><span class="line"><span class="built_in">console</span>.log(jack)  <span class="comment">// =&gt; 'man'</span></span><br><span class="line">jack = Gender1.Woman</span><br><span class="line"><span class="built_in">console</span>.log(jack)  <span class="comment">// =&gt; 'woman'</span></span><br></pre></td></tr></table></figure></li></ul><p>枚举用关键字<code>enum</code>来声明，默认情况下，元素编号从0开始，所以第一种情况的<strong>jack</strong>值默认是0。也可以手动指定成员的数据，就类似上述第二种情况。如果在给<strong>jack</strong>赋值时，不小心赋值了类似于<code>Gender.Men</code>，这样就会<strong>报错</strong>；</p><ul><li><p>void<br>代表空类型，一般用在没有返回值的函数声明时，类似于下述情况：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">b: <span class="built_in">any</span></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>never</p></li></ul><p>小tips：默认情况下，<code>null</code>或<code>undefined</code>是所有类型的子类型，就是说可以把<code>null</code>或<code>undefined</code>赋值给<code>number</code>、<code>string</code>等类型的变量。</p><h2 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str1: <span class="built_in">any</span> = <span class="string">'123'</span></span><br><span class="line"><span class="built_in">console</span>.log( (&lt;<span class="built_in">string</span>&gt;str1).split(<span class="string">''</span>) )  <span class="comment">// =&gt; pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str2: <span class="built_in">any</span> = <span class="string">'123'</span></span><br><span class="line"><span class="built_in">console</span>.log( (str2 <span class="keyword">as</span> <span class="built_in">string</span>).split(<span class="string">''</span>) )  <span class="comment">// =&gt; pass</span></span><br></pre></td></tr></table></figure><p>有两种形式：1.<code>&lt;string&gt;str</code>  2.<code>str2 as string</code><br>通过类型断言这种方式可以告诉编译器，“相信我，我知道自己在干什么”。类型断言好比其它语言里的类型转换，但是不进行特殊的数据检查和解构。它没有运行时的影响，只是在编译阶段起作用。TypeScript会假设你，程序员，已经进行了必须的检查。</p><hr><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><h2 id="接口基础"><a href="#接口基础" class="headerlink" title="接口基础"></a>接口基础</h2><p>接口就是用代码描述一个对象<strong>必须</strong>有什么属性或者方法，但是有没有其他属性或方法就不管。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Human &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jack: Human = &#123;name: <span class="string">'jack'</span>, age: <span class="number">18</span>&#125;</span><br></pre></td></tr></table></figure><p>接口用关键字<code>interface</code>来声明，例如上述代码，如果<strong>jack</strong>对象声明时少了<code>name</code>或者<code>age</code>属性，就会报错。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Head &#123;</span><br><span class="line">    eye: <span class="built_in">number</span>;</span><br><span class="line">    nose: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> Human &#123;</span><br><span class="line">    readonly name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">    head: Head;</span><br><span class="line">    likedGame?: <span class="built_in">Array</span>&lt;<span class="built_in">string</span>&gt;;</span><br><span class="line">    say(word: <span class="built_in">string</span>) : <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jsck: Human = &#123;</span><br><span class="line">    name: <span class="string">'jack'</span>,</span><br><span class="line">    age: <span class="number">18</span>,</span><br><span class="line">    head: &#123;eye: <span class="number">2</span>, nose: <span class="number">1</span>&#125;,</span><br><span class="line">    say(word: <span class="built_in">string</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(word)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">jack.name = <span class="string">'gavin'</span>  <span class="comment">// =&gt; error</span></span><br></pre></td></tr></table></figure><ul><li>如果一个接口内定义了必须还有对象，就类似上述再声明另一个接口；</li><li>如果一个接口内定义了必须有一个方法，就类似上述在接口内部直接定一个方法；</li><li>以上述代码为例，在接口定义时，在某一个属性前加一个<code>readonly</code>关键字，后面如果对<strong>jsck</strong>的<code>name</code>属性做修改就会<strong>报错</strong>；</li><li>如果定义一个接口时，在某个属性后面加一个<code>？</code>，表述对象声明时可以不声明这个对象，类似上述代码种的<code>likedGame</code>；</li></ul><h2 id="接口描述函数"><a href="#接口描述函数" class="headerlink" title="接口描述函数"></a>接口描述函数</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> SearchFunc &#123;</span><br><span class="line">    (a: <span class="built_in">string</span>, b: <span class="built_in">string</span>): <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> searchF = <span class="function"><span class="keyword">function</span> (<span class="params">c: <span class="built_in">string</span>, d: <span class="built_in">string</span></span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由如上述代码定义一个描述函数的接口，注意：上述a、b并不与c、d有什么关系。</p><p>如果接口描述的函数，这个函数内也有一个属性也是函数？代码如下：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> 二则运算 &#123;</span><br><span class="line">    (a: <span class="built_in">number</span>, b: <span class="built_in">number</span>): <span class="built_in">number</span>;</span><br><span class="line">    逆运算(a: <span class="built_in">number</span>, b: <span class="built_in">number</span>): <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> fn = ((): 二则运算 =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> x: <span class="built_in">any</span> = <span class="function"><span class="keyword">function</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    x.逆运算 = <span class="function"><span class="keyword">function</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a - b;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> add: 二则运算 = fn();</span><br></pre></td></tr></table></figure><h2 id="接口的继承"><a href="#接口的继承" class="headerlink" title="接口的继承"></a>接口的继承</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="keyword">interface</span> Animal &#123;</span><br><span class="line">    move(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> Human <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jack: Human = &#123;</span><br><span class="line">    name: <span class="string">'jack'</span>,</span><br><span class="line">    age: <span class="number">18</span>,</span><br><span class="line">    move() &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口的继承用关键字<code>extends</code>来实现，上述代码中，如果声明<strong>jack</strong>时没有声明<code>move</code>方法就会<strong>报错</strong>。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="keyword">interface</span> Animal &#123;</span><br><span class="line">    move(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> Human &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> Gen <span class="keyword">extends</span> Human, Animal &#123;</span><br><span class="line">    gender: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jack: Gen = &#123;</span><br><span class="line">    name: <span class="string">'jack'</span>,</span><br><span class="line">    age: <span class="number">18</span>,</span><br><span class="line">    gender: <span class="string">'man'</span>;</span><br><span class="line">    move() &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个接口可以继承多个接口，由如上述代码<code>Gen extends Human, Animal</code>，继承的多个接口用逗号隔开；当然上述代码中，声明<code>Human</code>接口时也可以继承<code>Animal</code>=&gt;<code>Human extends Animal</code>。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; class=&quot;headerlink&quot; title=&quot;变量&quot;&gt;&lt;/a&gt;变量&lt;/h1&gt;&lt;h2 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink&quot; title=&quot;数据类型&quot;&gt;&lt;/a&gt;数据类型&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;JS七种数据类型（number、string、undefined、null、object、boolean、symbol）&lt;/li&gt;
&lt;li&gt;any&lt;figure class=&quot;highlight ts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; n1:&lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;n1 = &lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;// error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; n2:&lt;span class=&quot;built_in&quot;&gt;any&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;n2 = &lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;// pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果一个变量在赋值时声明了是&lt;code&gt;number&lt;/code&gt;，后面如果把不是&lt;code&gt;number&lt;/code&gt;的数据赋值给&lt;strong&gt;n1&lt;/strong&gt;，那就会&lt;strong&gt;报错&lt;/strong&gt;；如果一个变量在赋值时声明的时&lt;code&gt;any&lt;/code&gt;，后面可以把任何类型的数据赋值给&lt;strong&gt;n2&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="TypeScript学习" scheme="http://yoursite.com/categories/TypeScript%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="TypeScript" scheme="http://yoursite.com/tags/TypeScript/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
</feed>
