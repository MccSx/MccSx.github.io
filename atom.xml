<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ShiXiang&#39;s Notes</title>
  
  <subtitle>Quick notes</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-06-16T15:41:56.284Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Shi Xiang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>TypeScript基础</title>
    <link href="http://yoursite.com/2019/06/14/typescript-learning1/"/>
    <id>http://yoursite.com/2019/06/14/typescript-learning1/</id>
    <published>2019-06-14T03:04:52.000Z</published>
    <updated>2019-06-16T15:41:56.284Z</updated>
    
    <content type="html"><![CDATA[<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul><li>JS七种数据类型（number、string、undefined、null、object、boolean、symbol）</li><li>any<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> n1:<span class="built_in">number</span> = <span class="number">1</span></span><br><span class="line">n1 = <span class="string">'1'</span>  <span class="comment">// error</span></span><br><span class="line"><span class="keyword">let</span> n2:<span class="built_in">any</span> = <span class="number">2</span></span><br><span class="line">n2 = <span class="string">'2'</span>  <span class="comment">// pass</span></span><br></pre></td></tr></table></figure></li></ul><p>如果一个变量在赋值时声明了是<code>number</code>，后面如果把不是<code>number</code>的数据赋值给<code>n1</code>，那就会<strong>报错</strong>；如果一个变量在赋值时声明的时<code>any</code>，后面可以把任何类型的数据赋值给<code>n2</code></p><a id="more"></a><ul><li>枚举(enum)<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Gender &#123; Man, Woman &#125;</span><br><span class="line"><span class="keyword">let</span> jack:Gender = Gender.Man</span><br><span class="line"><span class="built_in">console</span>.log(jack)  <span class="comment">// =&gt; 0</span></span><br><span class="line">jack = Gender.Woman</span><br><span class="line"><span class="built_in">console</span>.log(jack)  <span class="comment">// =&gt; 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> Gender1 = &#123; Man=<span class="string">'man'</span>, Woman=<span class="string">'woman'</span> &#125;</span><br><span class="line"><span class="keyword">let</span> jack:Gender1 = Gender1.Man</span><br><span class="line"><span class="built_in">console</span>.log(jack)  <span class="comment">// =&gt; 'man'</span></span><br><span class="line">jack = Gender1.Woman</span><br><span class="line"><span class="built_in">console</span>.log(jack)  <span class="comment">// =&gt; 'woman'</span></span><br></pre></td></tr></table></figure></li></ul><p>枚举用关键字<code>enum</code>来声明，默认情况下，元素编号从0开始，所以第一种情况的<code>jack</code>值默认是0。也可以手动指定成员的数据，就类似上述第二种情况。如果在给<code>jack</code>赋值时，不小心赋值了类似于<code>Gender.Men</code>，这样就会<strong>报错</strong>；</p><ul><li><p>void<br>代表空类型，一般用在没有返回值的函数声明时，类似于下述情况：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">b: <span class="built_in">any</span></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>never</p></li></ul><p>小tips：默认情况下，<code>null</code>或<code>undefined</code>是所有类型的子类型，就是说可以把<code>null</code>或<code>undefined</code>赋值给<code>number</code>、<code>string</code>等类型的变量。</p><h2 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str1: <span class="built_in">any</span> = <span class="string">'123'</span></span><br><span class="line"><span class="built_in">console</span>.log( (&lt;<span class="built_in">string</span>&gt;str1).split(<span class="string">''</span>) )  <span class="comment">// =&gt; pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str2: <span class="built_in">any</span> = <span class="string">'123'</span></span><br><span class="line"><span class="built_in">console</span>.log( (str2 <span class="keyword">as</span> <span class="built_in">string</span>).split(<span class="string">''</span>) )  <span class="comment">// =&gt; pass</span></span><br></pre></td></tr></table></figure><p>有两种形式：1.<code>&lt;string&gt;str</code>  2.<code>str2 as string</code><br>通过类型断言这种方式可以告诉编译器，“相信我，我知道自己在干什么”。类型断言好比其它语言里的类型转换，但是不进行特殊的数据检查和解构。它没有运行时的影响，只是在编译阶段起作用。TypeScript会假设你，程序员，已经进行了必须的检查。</p><hr><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><p>接口就是用代码描述一个对象<strong>必须</strong>有什么属性或者方法，但是有没有其他属性或方法就不管。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Human &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jack: Human = &#123;name: <span class="string">'jack'</span>, age: <span class="number">18</span>&#125;</span><br></pre></td></tr></table></figure><p>接口用关键字<code>interface</code>来声明，例如上述代码，如果<code>jack</code>对象声明时少了<code>name</code>或者<code>age</code>属性，就会报错。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Head &#123;</span><br><span class="line">    eye: <span class="built_in">number</span>;</span><br><span class="line">    nose: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> Human &#123;</span><br><span class="line">    readonly name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">    head: Head;</span><br><span class="line">    likedGame?: <span class="built_in">Array</span>&lt;<span class="built_in">string</span>&gt;</span><br><span class="line">    say(word: <span class="built_in">string</span>) : <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jsck: Human = &#123;</span><br><span class="line">    name: <span class="string">'jack'</span>,</span><br><span class="line">    age: <span class="number">18</span>,</span><br><span class="line">    head: &#123;eye: <span class="number">2</span>, nose: <span class="number">1</span>&#125;,</span><br><span class="line">    say(word: <span class="built_in">string</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(word)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">jack.name = <span class="string">'gavin'</span>  <span class="comment">// =&gt; error</span></span><br></pre></td></tr></table></figure><ul><li>如果一个接口内定义了必须还有对象，就类似上述再声明另一个接口；</li><li>如果一个接口内定义了必须有一个方法，就类似上述在接口内部直接定一个方法；</li><li>以上述代码为例，在接口定义时，在某一个属性前加一个<code>readonly</code>关键字，后面如果对<code>jsck</code>的<code>name</code>属性做修改就会<strong>报错</strong>；</li><li>如果定义一个接口时，在某个属性后面加一个<code>？</code>，表述对象声明时可以不声明这个对象，类似上述代码种的<code>likedGame</code>；</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; class=&quot;headerlink&quot; title=&quot;变量&quot;&gt;&lt;/a&gt;变量&lt;/h1&gt;&lt;h2 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink&quot; title=&quot;数据类型&quot;&gt;&lt;/a&gt;数据类型&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;JS七种数据类型（number、string、undefined、null、object、boolean、symbol）&lt;/li&gt;
&lt;li&gt;any&lt;figure class=&quot;highlight ts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; n1:&lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;n1 = &lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;// error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; n2:&lt;span class=&quot;built_in&quot;&gt;any&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;n2 = &lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;// pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果一个变量在赋值时声明了是&lt;code&gt;number&lt;/code&gt;，后面如果把不是&lt;code&gt;number&lt;/code&gt;的数据赋值给&lt;code&gt;n1&lt;/code&gt;，那就会&lt;strong&gt;报错&lt;/strong&gt;；如果一个变量在赋值时声明的时&lt;code&gt;any&lt;/code&gt;，后面可以把任何类型的数据赋值给&lt;code&gt;n2&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="TypeScript学习" scheme="http://yoursite.com/categories/TypeScript%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="TypeScript" scheme="http://yoursite.com/tags/TypeScript/"/>
    
  </entry>
  
</feed>
